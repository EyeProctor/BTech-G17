[{"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\index.js":"1","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\App.js":"2","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\index.js":"3","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quiz.js":"4","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\auth\\authReducers.js":"5","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\UI\\uiReducers.js":"6","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quizCreator.js":"7","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Coding\\CodeUI.js":"8","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\HomePage.js":"9","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\practice\\practice.js":"10","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Quiz.js":"11","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizCreation\\QuizCreator.js":"12","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\service\\userData.js":"13","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\service\\questions.js":"14","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\RightPanel.js":"15","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizHeader.js":"16","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Student\\StudentHome.js":"17","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherHome.js":"18","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\QuestionBody.js":"19","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\action\\quiz\\quiz.js":"20","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\Option.js":"21","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Capture.js":"22","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\QuestionIcon.js":"23"},{"size":587,"mtime":1616597502109,"results":"24","hashOfConfig":"25"},{"size":8926,"mtime":1616607185672,"results":"26","hashOfConfig":"25"},{"size":409,"mtime":1616605870186,"results":"27","hashOfConfig":"25"},{"size":1167,"mtime":1616597502112,"results":"28","hashOfConfig":"25"},{"size":485,"mtime":1616597502111,"results":"29","hashOfConfig":"25"},{"size":730,"mtime":1616597502110,"results":"30","hashOfConfig":"25"},{"size":2628,"mtime":1616597502113,"results":"31","hashOfConfig":"25"},{"size":2537,"mtime":1616597502104,"results":"32","hashOfConfig":"25"},{"size":300,"mtime":1616597502105,"results":"33","hashOfConfig":"25"},{"size":1843,"mtime":1616597502107,"results":"34","hashOfConfig":"25"},{"size":3834,"mtime":1616606087408,"results":"35","hashOfConfig":"25"},{"size":4215,"mtime":1616597502108,"results":"36","hashOfConfig":"25"},{"size":145,"mtime":1612114880826,"results":"37","hashOfConfig":"25"},{"size":4455,"mtime":1612114930843,"results":"38","hashOfConfig":"25"},{"size":1106,"mtime":1612114880824,"results":"39","hashOfConfig":"25"},{"size":3326,"mtime":1612372422099,"results":"40","hashOfConfig":"25"},{"size":569,"mtime":1616597502105,"results":"41","hashOfConfig":"25"},{"size":934,"mtime":1616597502106,"results":"42","hashOfConfig":"25"},{"size":1338,"mtime":1612114880824,"results":"43","hashOfConfig":"25"},{"size":398,"mtime":1616597502104,"results":"44","hashOfConfig":"25"},{"size":795,"mtime":1612114880823,"results":"45","hashOfConfig":"25"},{"size":1231,"mtime":1612114880823,"results":"46","hashOfConfig":"25"},{"size":2040,"mtime":1612372422100,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"12qpcll",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\index.js",[],["101","102"],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\App.js",["103","104"],"import {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom';\r\nimport Practice from './components/practice/practice';\r\nimport Quiz from \"./components/quiz/Quiz\";\r\nimport {Component, createRef} from 'react';\r\nimport {Button, CardContent} from '@material-ui/core'\r\nimport {Grid} from '@material-ui/core'\r\nimport Webcam from \"react-webcam\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport HomePage from './components/Home/HomePage'\r\nimport CodeUI from './components/Coding/CodeUI';\r\nimport Creator from './components/quiz/QuizCreation/QuizCreator'\r\n\r\nfunction App() {\r\n\treturn(\r\n\t\t<Router>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Creator} />\r\n                <Route path=\"/home\" exact component={HomePage} />\r\n                <Route path=\"/quiz\" exact component={WebCamScreen} />\r\n                <Route path=\"/quizID\" exact component={Quiz} />\r\n            </Switch>\r\n        </Router>\r\n\t);\r\n}\r\n\r\n\r\nclass WebCamScreen extends Component {\r\n    // webcamRef: React.useRef(null),\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  webcamRef: createRef(null),\r\n            videoConstraints: {facingMode: \"user\"},\r\n            camActive: false\r\n        }\r\n        navigator.mediaDevices.getUserMedia({video: true}).then(\r\n            () => {\r\n                this.setState({camActive: true});\r\n            }\r\n        ).catch((err)=> console.log(err));\r\n\r\n        console.log(\"IN App JS\",localStorage.getItem(\"UserToken\"));\r\n    }\r\n    \r\n\r\n    render() {\r\n      return (\r\n        <>\r\n        <Grid container spacing={2}>\r\n\r\n                <Grid item xs={6} style={{marginTop:100}}>\r\n                    <Card style={{marginLeft:150,marginRight:100,background:'#1e88e5'}}>\r\n                        <CardContent style={{marginTop:15,color:'white'}}>\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:800}}>\r\n                            Subject :\r\n                        </Typography>\r\n\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:500,marginLeft:10}}>\r\n                            Operating System\r\n                        </Typography>\r\n                        <br/>\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:800}}>\r\n                            Time :\r\n                        </Typography>\r\n\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:500,marginLeft:10}}>\r\n                            10 Minutes\r\n                        </Typography>\r\n                        </CardContent>\r\n                        </Card>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                        <Webcam  style={{width:550,marginTop:20}}\r\n                        audio={false}\r\n                        ref={this.state.webcamRef}\r\n                        videoConstraints={this.state.videoConstraints}\r\n                        />\r\n                        <br/>\r\n                        {\r\n                    this.state.camActive?<Link style={{}} to=\"/quizID\"><Button style={{background:'#03A9F4',color:'white',marginTop:10}}>Take Quiz</Button></Link>\r\n                    :<Card style={{color: 'red', padding: 10}}> Please Allow Camera Permissions </Card>\r\n                }\r\n                        \r\n                        {/* Capture Button can be triggered in Attempt quiz Button\r\n                        <button onClick={capture}>Capture photo</button> */}\r\n                \r\n                </Grid>\r\n                <hr/>\r\n                <Grid item xs={12} style={{background:'#274056',paddingBottom:'25%'}}>\r\n                    <br/>\r\n\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:600,marginLeft:200,color:'white'}}>\r\n                            Instructions :\r\n                        </Typography>\r\n                        <Typography style={{fontWeight:300,marginLeft:215,color:'white'}}>\r\n                            <ul>\r\n                            <li>Select an answer for every question. Unanswered questions will be scored as incorrect.</li>\r\n                            <li>Timing - You will need to complete each of your attempts in one sitting, as you are allotted 10 minutes to complete each attempt.</li>\r\n                            <li>Answers - You may review your answer-choices and compare them to the correct answers after your final attempt.</li>\r\n                            <li>To start, click the \"Take the Quiz\" button. When finished, click the \"Submit Quiz\" button.</li>\r\n                            <li>Click on the Submit button at the bottom of the page to have your answers graded.</li>\r\n                            </ul>\r\n                        </Typography>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n/*import QuizHeader from './components/quiz/QuizHeader';\r\nimport {Grid, Card, CardActions, Button } from '@material-ui/core';\r\nimport QuestionsPanel from './components/quiz/rightPanel/RightPanel.js';\r\nimport QuestionBody, {  } from \"./components/quiz/questions/QuestionBody\";\r\nimport Countdown from 'react-countdown';\r\nimport questionBank from './service/questions.js';\r\nimport userData from './service/userData.js';\r\nimport {  useState, useEffect } from 'react';\r\n\r\nfunction App() {\r\n\r\n\t\t// var userChoice = {\r\n\t\t// \tprn: userData.prn,\r\n\t\t// \tstartDate : 'dd-mm-yyy',\r\n\t\t// \tchoices: {},\r\n\t\t// \tcurrent: currentQ,\r\n\t\t// }\r\n\t\tuseEffect(() => {\r\n\t\t\t   setStartDate(Date.now());\r\n\t\t\t   document.documentElement.requestFullscreen().catch((e) => {console.log(e)})\r\n\t\t  }, []);\r\n\t// \tconst  blackListedKeys = ['Control', 'Alt', 'Tab']\r\n\t// \twindow.addEventListener('keydown', function (event) {\r\n\r\n\t// \t\t// if the keyCode is 16 ( shift key was pressed )\r\n\t\t\r\n\t// \t\t\t// prevent default behaviour\r\n\t// \t\t\tif(blackListedKeys.includes(event.key)){\r\n\t// \t\t\t\tevent.preventDefault();\r\n\t// \t\t\treturn false;\r\n\t// \t\t\t}\r\n\t\t\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t// })\r\n\tvar [attempted, updateAttempted] = useState([]);\r\n\tconst [startDate,setStartDate] = useState(Date.now());\r\n\tconst [flagged, updateFlagged] = useState([]);\r\n\tconst [currentQ, updateCurrentQ] = useState(1);\r\n\tvar endDate = startDate + questionBank.duration;\r\n\tconst handleAttempted = () => {\r\n\t\tupdateAttempted(\r\n\t\t\tarr => [...arr, currentQ]\r\n\t\t\t\r\n\t\t);\r\n\t\tattempted = [...new Set(attempted)];\r\n\t\tconsole.log('AttemptedArray',attempted);\r\n\t}\r\n\tconst handleFlagged = () => {\r\n\t\tif(!flagged.includes(currentQ))\r\n\t\t\tupdateFlagged(\r\n\t\t\t\tarr => [...arr, currentQ]\r\n\t\t\t)\r\n\t\telse{\r\n\t\t\tvar temp = [...flagged]\r\n\t\t\ttemp.splice(temp.indexOf(currentQ));\r\n\t\t\tupdateFlagged(\r\n\t\t\t\ttemp\r\n\t\t\t)\r\n\t\t}\r\n\t\t// console.log('FlaggedArray',flagged);\r\n\t\t// console.log('CurrentQ',currentQ);\r\n\t}\r\n\tconst handlePrev = () => {\r\n\t\tupdateCurrentQ(currentQ-1);\r\n\t}\r\n\tconst handleNext = () => {\r\n\t\tupdateCurrentQ(currentQ+1);\r\n\t}\r\n\r\n\tconst handleUserChoice = (val) => {\r\n\r\n\t\tupdateUserChoice({...userChoices, [currentQ]: val})\r\n\r\n\t\t// console.log(JSON.stringify(userChoices));\r\n\t}\r\n\r\n\tvar [userChoices, updateUserChoice] = useState({});\r\n\r\n  return (\r\n    <div>\r\n      <Grid container justify={'center'} spacing={2}>\r\n        <Grid item xs={12} >\r\n        \t<QuizHeader prn={userData.prn} status=\"Valid\"/>\r\n        </Grid>\r\n\t\t<Grid item container spacing={2} xs={12}>\r\n\t\t\t<Grid item xs={8}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t<QuestionBody onFlagged={handleFlagged} onAttempted={handleAttempted} currentQ={questionBank.questions[currentQ - 1]} no = {currentQ} flagged={flagged} userChoice={userChoices[currentQ.toString()]} updateUserChoice={handleUserChoice}/>\r\n\t\t\t\t<CardActions>\r\n\t\t<Grid container\r\n  direction=\"row\"\r\n  justify=\"space-between\"\r\n  alignItems=\"center\" >\r\n\t\t<Grid item>\t{\r\n\t\t\t(currentQ !== 1) ?\r\n\t\t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handlePrev}>\r\n\t\t\t\tPrev\r\n\t\t\t</Button>:<></>\r\n\t\t  }</Grid>\r\n\t\t <Grid item> {currentQ < questionBank.questions.length?<Button  variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handleNext}  >\r\n          Next\r\n        </Button>:<></>}\r\n\t\t</Grid>\r\n        </Grid>\r\n      </CardActions>\r\n\t\t\t\t</Card>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={4}>\r\n\t\t\t\t<Grid item xs={12} container>\r\n\t\t\t\t\t<QuestionsPanel updateNav={(val)=> updateCurrentQ(val) } qNo={questionBank.questions.length} attemptedQ={attempted} flagged={flagged} current={currentQ}/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<Button onClick={()=>{alert(JSON.stringify(userChoices))}} variant=\"contained\" style={{background:'green',color: 'white', marginTop: 10}}>\r\n          Submit\r\n        </Button>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={8}>\r\n\t\t\t\t<Countdown date={endDate} />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n        </Grid>\r\n\t\t<Grid item xs={12} >\r\n        \t<h1>Group 17</h1>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\r\n","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\index.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quiz.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\auth\\authReducers.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\UI\\uiReducers.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quizCreator.js",["105"],"const initialState = {\r\n    subject: null,\r\n    proctored: false,\r\n    startDate: null,\r\n    endDate: null,\r\n    duration: null,\r\n    questions: []\r\n}\r\n\r\nvar questionState = {\r\n    qNo: null,\r\n    qType: 1,\r\n    question: \"\",\r\n    options: []\r\n}\r\n\r\nconst optionsState = {\r\n    qs: \"\",\r\n    ans: false\r\n};\r\n\r\n\r\n\r\nvar QIndex, OIndex, QArray;\r\n\r\nconst quizCreatorReducer = (state= initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD_QUESTION_TEMPLATE\":\r\n            QArray = [...state.questions];\r\n            const newQuestionState = {...questionState, qNo: QArray.length+1 }\r\n            QArray.push(newQuestionState)\r\n            return {...state, questions: QArray}\r\n\r\n        case 'ADD_QUESTION':\r\n            QArray = [...state.questions];\r\n            QIndex = action.payload.QIndex;\r\n            QArray[QIndex].question = action.payload.question;\r\n            return {...state, questions: QArray}\r\n\r\n        case \"ADD_OPTION_TEMPLATE\":\r\n            QArray = [...state.questions];\r\n            var op = QArray[action.payload.QIndex]\r\n            op.options = [...op.options, {qs: \"\",ans: false}]\r\n            return {...state, questions: QArray}\r\n\r\n        case 'ADD_OPTION':\r\n            QArray = [...state.questions];\r\n            QIndex = action.payload.QIndex;\r\n            OIndex = action.payload.OIndex;\r\n            QArray[QIndex].options[OIndex] = {...optionsState, qs: action.payload.option}\r\n            return {...state, questions: QArray}\r\n        \r\n        case 'SET_ANSWER':\r\n            QArray = [...state.questions];\r\n            QIndex = action.payload.QIndex;\r\n            OIndex = action.payload.OIndex;\r\n            var op = QArray[QIndex]\r\n            \r\n            if(op.options[OIndex].ans){\r\n                \r\n                QArray[QIndex].options[OIndex].ans = false;\r\n                return {...state, questions: QArray}\r\n            }\r\n            op.options.forEach(O => {\r\n                if(O.ans){\r\n                    O.ans = false;\r\n                }\r\n            });\r\n            \r\n            QArray[QIndex].options[OIndex] = {...op.options[OIndex], ans: true}\r\n            return {...state, questions: QArray}\r\n        \r\n        case \"SET_QUIZ_SUBJECT\":\r\n            return {...state, subject: action.payload}\r\n        case \"SET_STARTDATE\":\r\n            return {...state, startDate: action.payload}\r\n        case \"SET_ENDDATE\":\r\n            return {...state, endDate: action.payload}\r\n        case \"SET_DURATION\":\r\n            return {...state, duration: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default quizCreatorReducer;","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Coding\\CodeUI.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\HomePage.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\practice\\practice.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Quiz.js",["106","107"],"import QuizHeader from './QuizHeader';\r\nimport {Grid, Card, CardActions, Button } from '@material-ui/core';\r\nimport QuestionsPanel from './rightPanel/RightPanel.js';\r\nimport QuestionBody, {  } from \"./questions/QuestionBody\";\r\nimport Countdown from 'react-countdown';\r\nimport questionBank from '../../service/questions.js';\r\nimport userData from '../../service/userData.js';\r\nimport {  useState, useEffect } from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getQuiz} from '../../action/quiz/quiz';\r\n\r\nfunction Quiz() {\r\n\tuseEffect(() => {\r\n\t\t\t   setStartDate(Date.now());\r\n\t\t\t   dispatch(getQuiz());\r\n\t\t\t   document.documentElement.requestFullscreen().catch((e) => {console.log(e)})\r\n\t}, []);\r\n\tconst dispatch = useDispatch();\r\n\tconst userID = \"1234\";\r\n\t// const userID = useSelector(state => state.auth.user.id) || null;\r\n\t// const questionBank = useSelector(state => state.quiz.questions)\r\n\tvar [attempted, updateAttempted] = useState([]);\r\n\tconst [startDate,setStartDate] = useState(Date.now());\r\n\tconst [flagged, updateFlagged] = useState([]);\r\n\tconst [currentQ, updateCurrentQ] = useState(1);\r\n\tvar endDate = startDate + questionBank.duration;\r\n\t\r\n\tconst handleAttempted = () => {\r\n\t\tattempted = [...new Set(attempted)];\r\n\t\tupdateAttempted(\r\n\t\t\tarr => [...arr, currentQ]\r\n\t\t\t\r\n\t\t);\r\n\t\tconsole.log('AttemptedArray',attempted);\r\n\t\t\r\n\t}\r\n\tconst handleFlagged = () => {\r\n\t\tif(!flagged.includes(currentQ))\r\n\t\t\tupdateFlagged(\r\n\t\t\t\tarr => [...arr, currentQ]\r\n\t\t\t)\r\n\t\telse{\r\n\t\t\tvar temp = [...flagged]\r\n\t\t\ttemp.splice(temp.indexOf(currentQ));\r\n\t\t\tupdateFlagged(\r\n\t\t\t\ttemp\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t\r\n\t\t\r\n\t}\r\n\tconst handlePrev = () => {\r\n\t\tupdateCurrentQ(currentQ-1);\r\n\t}\r\n\tconst handleNext = () => {\r\n\t\tupdateCurrentQ(currentQ+1);\r\n\t}\r\n\r\n\tconst handleUserChoice = (val) => {\r\n\r\n\t\tupdateUserChoice({...userChoices, [currentQ]: val})\r\n\t\t\r\n\r\n\t}\r\n\r\n\tvar [userChoices, updateUserChoice] = useState({});\r\n\tuseEffect(()=> {\r\n\t\tconst data = {\r\n\t\t\tuserID: userID,\r\n\t\t\tattempted: attempted,\r\n    \t\tflagged: flagged,\r\n    \t\tuserChoices: userChoices,\r\n    \t\tstartedAt: null,\r\n\t\t\tquestions: questionBank,\r\n\t\t}\r\n\r\n\t\tdispatch({type: \"SAVE_USERCHOICES\", payload: data});\r\n\r\n\t}, [attempted, flagged, userChoices,dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container justify={'center'} spacing={2}>\r\n        <Grid item xs={12} >\r\n        \t<QuizHeader prn={userData.prn} status=\"Valid\"/>\r\n        </Grid>\r\n\t\t<Grid item container spacing={2} xs={12}>\r\n\t\t\t<Grid item xs={8}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t<QuestionBody onFlagged={handleFlagged} onAttempted={handleAttempted} currentQ={questionBank.questions[currentQ - 1]} no = {currentQ} flagged={flagged} userChoice={userChoices[currentQ.toString()]} updateUserChoice={handleUserChoice}/>\r\n\t\t\t\t<CardActions>\r\n\t\t\r\n\t\t\t{\r\n\t\t\t(currentQ !== 1) ?\r\n\t\t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handlePrev}>\r\n\t\t\t\tPrev\r\n\t\t\t</Button>:<></>\r\n\t\t  }\r\n\t\t  {currentQ < questionBank.questions.length?<Button  variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handleNext}>\r\n          Next\r\n        </Button>:<></>}\r\n        \r\n      </CardActions>\r\n\t\t\t\t</Card>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={4}>\r\n\t\t\t\t<Grid item xs={12} container>\r\n\t\t\t\t\t<QuestionsPanel updateNav={(val)=> updateCurrentQ(val) } qNo={questionBank.questions.length} attemptedQ={attempted} flagged={flagged} current={currentQ}/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<Button onClick={()=>{alert(JSON.stringify(userChoices))}} variant=\"contained\" style={{background:'green',color: 'white', marginTop: 10}}>\r\n          Submit\r\n        </Button>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={8}>\r\n\t\t\t\t<Countdown date={endDate} />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n        </Grid>\r\n\t\t<Grid item xs={12} >\r\n        \t<h1>Group 17</h1>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizCreation\\QuizCreator.js",["108","109"],"import {useState, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TextField,Grid,Button,Checkbox,FormControlLabel} from '@material-ui/core';\r\n\r\nconst QuizCreator = () => {\r\n    const dispatch = useDispatch();\r\n    const state = useSelector(state => state.quizCreator);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\t\t// Do Simple for Check\r\n\r\n\t\t// Sending Request to backend\r\n\r\n\t\tfetch(\"/quiz/addQuiz\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(state)\r\n\t\t}).then(data => data.json().then(\r\n\t\t\tconsole.log(data)\r\n\t\t)).catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    const addQuestion = () => {\r\n        dispatch({type: \"ADD_QUESTION_TEMPLATE\"});\r\n    }\r\n    const addOption = (QIndex) => {\r\n        dispatch({type: \"ADD_OPTION_TEMPLATE\", payload:{QIndex}});\r\n    }\r\n    return(\r\n        <form  onSubmit={handleSubmit} noValidate autoComplete=\"off\" center=\"true\" margin=\"20px\">\r\n\t\t\t\t<Grid container spacing={3} alignItems=\"center\" style={{padding:50 ,backgroundColor:\"beige\"}}>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<TextField onChange = {(e)=> {dispatch({type:\"SET_QUIZ_SUBJECT\", payload: e.target.value})}} id=\"quizsub\" label=\"Quiz Subject\" variant=\"outlined\" fullWidth/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField fullWidth\r\n\t\t\t\t\t\t\tid=\"datetime-start\"\r\n\t\t\t\t\t\t\tlabel=\"Start Date Time\"\r\n\t\t\t\t\t\t\ttype=\"datetime-local\"\r\n\t\t\t\t\t\t\tdefaultValue=\"2017-05-24T00:00\"\r\n\t\t\t\t\t\t\tonChange = {(e)=> {dispatch({type:\"SET_STARTDATE\", payload: new Date(e.target.value)})}}\r\n\t\t\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\t\tshrink: true,}}/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField fullWidth\r\n\t\t\t\t\t\t\tid=\"datetime-end\"\r\n\t\t\t\t\t\t\tlabel=\"End Date Time\"\r\n\t\t\t\t\t\t\ttype=\"datetime-local\"\r\n\t\t\t\t\t\t\tdefaultValue=\"2020-01-24T00:00\"\r\n\t\t\t\t\t\t\tonChange = {(e)=> {dispatch({type:\"SET_ENDDATE\", payload: new Date(e.target.value)})}}\r\n\t\t\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\t\tshrink: true,}}/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField onChange = {(e)=> {dispatch({type:\"SET_DURATION\", payload: e.target.value})}} type=\"number\" id=\"dur\" label=\"Duration in minutes\" variant=\"outlined\" fullWidth/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstate.questions.map((val, idx)=> {\r\n\t\t\t\t\t\t\t\tlet queId = `que-${idx+1}`\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={10}>\r\n\t\t\t\t\t\t\t\t\t<div key={idx}>\r\n\t\t\t\t\t\t\t\t\t<Grid container spacing={3} alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={10}><TextField fullWidth\r\n\t\t\t\t\t\t\t\t\t\tlabel={\"Question#\"+idx}\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tname={queId}\r\n\t\t\t\t\t\t\t\t\t\tdata-id={idx}\r\n\t\t\t\t\t\t\t\t\t\tid={queId}\r\n\t\t\t\t\t\t\t\t\t\tvalue= {val.question}\r\n\t\t\t\t\t\t\t\t\t\tonChange = {(e)=> dispatch({type: \"ADD_QUESTION\", payload: {QIndex: idx, question: e.target.value}})}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"question-text\"\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t\t\t\t<Button label=\"+Add Option\" variant=\"outlined\" onClick={()=>addOption(idx)}>+ Add Option</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n                                    {\r\n\t\t\t\t\t\t\tstate.questions[idx].options.map((val, oIdx)=> {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={oIdx}>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={2}>\r\n                                        <FormControlLabel control={\r\n                                        <Checkbox checked={val.ans} onChange={()=> dispatch({type: \"SET_ANSWER\", payload: {QIndex: idx, OIndex: oIdx}})} color=\"primary\" inputProps={{ 'aria-label': 'secondary checkbox' }} />\r\n                                        \r\n                                        } label={\r\n\t\t\t\t\t\t\t\t\t\t\t<TextField fullWidth label={`Option No.${oIdx+1}`} value={val.qs} onChange={(e)=> {dispatch({type:\"ADD_OPTION\", payload:{QIndex: idx, OIndex: oIdx, option: e.target.value}})}}/>\r\n\t\t\t\t\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Button variant=\"outlined\" onClick={addQuestion}>+ Add Question</Button>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<Button variant=\"outlined\" type=\"submit\">Submit</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n    );\r\n}\r\n\r\nexport default QuizCreator;","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\service\\userData.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\service\\questions.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\RightPanel.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizHeader.js",["110"],"import AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport {Grid } from '@material-ui/core';\r\nimport Capture from './Capture.js'\r\nimport { useState, useEffect } from 'react';\r\nimport * as faceapi from 'face-api.js';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; \r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n\r\n\r\n  appBar: {\r\n  margin: 0,\r\n  },\r\n\r\n\r\n  userIcon:{\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n    marginLeft:'90%',\r\n    borderRadius: '3rem'\r\n  }\r\n  }));\r\n\r\nconst QuizHeader = (props) => {\r\n  useEffect(() => {\r\n    faceapi.nets.tinyFaceDetector.loadFromUri('/models').then(()=> {console.log(\r\n      \"Face API Started\"\r\n    )}).catch((err) => console.log(\"Error Starting FACE API\", err.message));\r\n    \r\n    }, []);\r\n    function warn(message){\r\n      confirmAlert({\r\n        title: 'Warning',\r\n        message: message,\r\n        buttons: [\r\n          {\r\n            label: 'OK',\r\n            onClick: () => document.documentElement.requestFullscreen().catch((e) => {console.log(e)})\r\n          }\r\n        ]\r\n      });\r\n    };\r\n    const faceProcessingFunction = (faceData) => {\r\n      console.log(faceData.length)\r\n      if(faceData.length === 0){\r\n        warn(\"No Face Detected\")\r\n      }\r\n      else if(faceData.length > 1){\r\n        warn(\"Multiple Face Detected\")\r\n      }\r\n    }\r\n\r\n    const userPRN = props.prn;\r\n    const status = props.status;\r\n    //const profile = props.profile;\r\n    const classes = useStyles();\r\n    const [ImgSrc,setImgSrc]= useState(\"\");\r\n    const updateImgSrc = (img) => {\r\n      setImgSrc(img);\r\n      faceapi.detectAllFaces(\"input\", new faceapi.TinyFaceDetectorOptions()).then((data) => faceProcessingFunction(data)).catch((err)=> console.error(err))\r\n    }\r\n\r\n    return(\r\n        <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar style={{ background: '#274056' ,padding:5}}>\r\n         \r\n          <Grid container spacing={2}>\r\n            \r\n            <Grid item xs={4}>\r\n              <Typography variant=\"h5\" style={{fontWeight:500,margin:10}}>\r\n               Operating System\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={4} >\r\n              <img id=\"input\" src={ImgSrc} className={classes.userIcon}/>\r\n            </Grid>\r\n\r\n            <Grid item xs={3} style={{marginTop:'0.3%'}}>\r\n              <Typography display=\"inline\" style={{marginLeft:15}} varient=\"h6\">PRN : </Typography>\r\n              <Typography display=\"inline\" style={{marginLeft:5}} varient=\"h6\">{userPRN}</Typography>\r\n              <br/>\r\n              <Typography display=\"inline\" style={{marginLeft:15}} varient=\"h6\">Status : </Typography>\r\n              <Typography display=\"inline\" style={{marginLeft:5,color:'#22D400',fontWeight:600}} varient=\"h6\">{status}</Typography>\r\n            </Grid>\r\n            <Grid xs={1}>\r\n              <Capture setImgSrc={updateImgSrc}/>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n}\r\n\r\n\r\nexport default QuizHeader;","F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Student\\StudentHome.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherHome.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\QuestionBody.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\action\\quiz\\quiz.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\Option.js",[],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Capture.js",[],["111","112"],"F:\\IMProgramming\\btmega-project\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\QuestionIcon.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":2,"column":8,"nodeType":"119","messageId":"120","endLine":2,"endColumn":16},{"ruleId":"117","severity":1,"message":"121","line":11,"column":8,"nodeType":"119","messageId":"120","endLine":11,"endColumn":14},{"ruleId":"122","severity":1,"message":"123","line":58,"column":17,"nodeType":"119","messageId":"124","endLine":58,"endColumn":19},{"ruleId":"117","severity":1,"message":"125","line":9,"column":22,"nodeType":"119","messageId":"120","endLine":9,"endColumn":33},{"ruleId":"126","severity":1,"message":"127","line":17,"column":5,"nodeType":"128","endLine":17,"endColumn":7,"suggestions":"129"},{"ruleId":"117","severity":1,"message":"130","line":1,"column":9,"nodeType":"119","messageId":"120","endLine":1,"endColumn":17},{"ruleId":"117","severity":1,"message":"131","line":1,"column":19,"nodeType":"119","messageId":"120","endLine":1,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":86,"column":15,"nodeType":"134","endLine":86,"endColumn":74},{"ruleId":"113","replacedBy":"135"},{"ruleId":"115","replacedBy":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'Practice' is defined but never used.","Identifier","unusedVar","'CodeUI' is defined but never used.","no-redeclare","'op' is already defined.","redeclared","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["139"],"'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["137"],["138"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [dispatch]",{"range":"142","text":"143"},[716,718],"[dispatch]"]