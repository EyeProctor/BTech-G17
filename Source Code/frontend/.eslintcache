[{"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\index.js":"1","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\App.js":"2","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\index.js":"3","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Quiz.js":"4","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\TempLanding.js":"5","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\MalpracticeGallary.js":"6","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\TeacherQuizLanding.js":"7","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\HomePage.js":"8","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\OE\\CreateRoom.js":"9","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\OE\\Room.js":"10","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizCreation\\QuizCreator.js":"11","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Coding\\CodeUI.js":"12","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateStudent\\CreateStudent.js":"13","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\CreateCourse.js":"14","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\AdminHome.js":"15","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\AssignCourse.js":"16","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Student\\CourseHome.js":"17","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Login\\Login.js":"18","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateTeacher\\CreateTeacher.js":"19","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherCourse.js":"20","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quizCreator.js":"21","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Profile\\TeacherProfile.js":"22","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Profile\\StudentProfile.js":"23","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quiz.js":"24","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\course\\courseReducer.js":"25","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\auth\\authReducers.js":"26","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\course\\currentCourseReducer.js":"27","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\UI\\uiReducers.js":"28","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizLandingPage.js":"29","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\service\\userData.js":"30","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\RightPanel.js":"31","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Student\\StudentHome.js":"32","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherHome.js":"33","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizHeader.js":"34","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\QuestionBody.js":"35","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizDownload.js":"36","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Helper\\CustomBox.js":"37","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\QuestionIcon.js":"38","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Login\\ProfileMenu.js":"39","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Capture.js":"40","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\blankProfile.js":"41","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\Option.js":"42","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Coding\\CreateCodingQuetion.js":"43"},{"size":1160,"mtime":1617903005000,"results":"44","hashOfConfig":"45"},{"size":3748,"mtime":1618495958641,"results":"46","hashOfConfig":"45"},{"size":732,"mtime":1617903005000,"results":"47","hashOfConfig":"45"},{"size":5184,"mtime":1617903005000,"results":"48","hashOfConfig":"45"},{"size":4366,"mtime":1617903005000,"results":"49","hashOfConfig":"45"},{"size":2087,"mtime":1617903005000,"results":"50","hashOfConfig":"45"},{"size":1705,"mtime":1617903005000,"results":"51","hashOfConfig":"45"},{"size":518,"mtime":1617903005000,"results":"52","hashOfConfig":"45"},{"size":261,"mtime":1617903005000,"results":"53","hashOfConfig":"45"},{"size":3323,"mtime":1617903005000,"results":"54","hashOfConfig":"45"},{"size":5384,"mtime":1617903005000,"results":"55","hashOfConfig":"45"},{"size":8564,"mtime":1617903005000,"results":"56","hashOfConfig":"45"},{"size":7519,"mtime":1617903005000,"results":"57","hashOfConfig":"45"},{"size":6053,"mtime":1617903005000,"results":"58","hashOfConfig":"45"},{"size":1415,"mtime":1617903005000,"results":"59","hashOfConfig":"45"},{"size":5123,"mtime":1617903005000,"results":"60","hashOfConfig":"45"},{"size":2045,"mtime":1617903005000,"results":"61","hashOfConfig":"45"},{"size":5127,"mtime":1617903005000,"results":"62","hashOfConfig":"45"},{"size":5169,"mtime":1617903005000,"results":"63","hashOfConfig":"45"},{"size":5471,"mtime":1617903005000,"results":"64","hashOfConfig":"45"},{"size":2716,"mtime":1617903005000,"results":"65","hashOfConfig":"45"},{"size":2371,"mtime":1617903005000,"results":"66","hashOfConfig":"45"},{"size":2720,"mtime":1617903005000,"results":"67","hashOfConfig":"45"},{"size":1380,"mtime":1617903005000,"results":"68","hashOfConfig":"45"},{"size":221,"mtime":1617903005000,"results":"69","hashOfConfig":"45"},{"size":546,"mtime":1617903005000,"results":"70","hashOfConfig":"45"},{"size":242,"mtime":1617903005000,"results":"71","hashOfConfig":"45"},{"size":705,"mtime":1617903005000,"results":"72","hashOfConfig":"45"},{"size":4973,"mtime":1618495279405,"results":"73","hashOfConfig":"45"},{"size":138,"mtime":1617903005000,"results":"74","hashOfConfig":"45"},{"size":1104,"mtime":1617903005000,"results":"75","hashOfConfig":"45"},{"size":2773,"mtime":1617903005000,"results":"76","hashOfConfig":"45"},{"size":2803,"mtime":1617903005000,"results":"77","hashOfConfig":"45"},{"size":4003,"mtime":1617903005000,"results":"78","hashOfConfig":"45"},{"size":1298,"mtime":1617903005000,"results":"79","hashOfConfig":"45"},{"size":1279,"mtime":1617903005000,"results":"80","hashOfConfig":"45"},{"size":308,"mtime":1617903005000,"results":"81","hashOfConfig":"45"},{"size":1981,"mtime":1617903005000,"results":"82","hashOfConfig":"45"},{"size":3585,"mtime":1617903005000,"results":"83","hashOfConfig":"45"},{"size":1188,"mtime":1617903005000,"results":"84","hashOfConfig":"45"},{"size":23079,"mtime":1617903005000,"results":"85","hashOfConfig":"45"},{"size":772,"mtime":1617903005000,"results":"86","hashOfConfig":"45"},{"size":12445,"mtime":1618507296529,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w2g7bd",{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"97"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"97"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"97"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"97"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"97"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"97"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"97"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"97"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"97"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"97"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"97"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"97"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\index.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\App.js",["190"],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\index.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Quiz.js",["191","192"],"import QuizHeader from './QuizHeader';\nimport {Grid, Card, CardActions, Button } from '@material-ui/core';\nimport QuestionsPanel from './rightPanel/RightPanel.js';\nimport QuestionBody, {  } from \"./questions/QuestionBody\";\nimport Countdown from 'react-countdown';\n// import questionBank from '../../service/questions.js';\nimport userData from '../../service/userData.js';\nimport {  useState, useEffect } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { saveUserChoices } from '../../reducer/quiz/quiz'\nimport { useHistory } from 'react-router';\n\nfunction Quiz(props) {\n\tconst quizDataFromStore = useSelector(state => state.quiz);\n\tconst userName = useSelector(state => state.auth)\n\tvar startDate = 0;\n\tconst history = useHistory();\n\tconsole.log(JSON.stringify(quizDataFromStore))\n\tif(quizDataFromStore.startedAt === null)\n\t\tstartDate = Date.now()\n\telse\n\t\tstartDate = quizDataFromStore.startedAt;\n\tuseEffect(() => {\n\t\t\t   document.documentElement.requestFullscreen().catch((e) => {console.log(e)})\n\t\t\t   \n\t\t\t   //setStartDate( );\n\t}, []);\n\t\n\tconst dispatch = useDispatch();\n\t\n\tconst fromStore = quizDataFromStore.userChoices;\n\tconst userID = props.match.params.userID;\n\tconst quizID = props.match.params.quizID;\n\tconst questionBank = quizDataFromStore.questions;\n\t// const [quizData, setQuizData] = useState([])\n\tvar [attempted, updateAttempted] = useState(quizDataFromStore.attempted);\n\t// const [startDate,setStartDate] = useState(Date.now());\n\tconst [flagged, updateFlagged] = useState(quizDataFromStore.flagged);\n\tconst [currentQ, updateCurrentQ] = useState(1);\n\tvar endDate = startDate + parseInt(questionBank.duration)*60000;\n\tconsole.log(\"Start Date\", startDate);\n\t\n\tconst handleAttempted = () => {\n\t\tattempted = [...new Set(attempted)];\n\t\tupdateAttempted(\n\t\t\tarr => [...arr, currentQ]\n\t\t\t\n\t\t);\n\t\tconsole.log('AttemptedArray',attempted);\n\t\t\n\t}\n\tconst handleFlagged = () => {\n\t\tif(!flagged.includes(currentQ))\n\t\t\tupdateFlagged(\n\t\t\t\tarr => [...arr, currentQ]\n\t\t\t)\n\t\telse{\n\t\t\tvar temp = [...flagged]\n\t\t\ttemp.splice(temp.indexOf(currentQ));\n\t\t\tupdateFlagged(\n\t\t\t\ttemp\n\t\t\t)\n\t\t}\n\t}\n\tconst handlePrev = () => {\n\t\tupdateCurrentQ(currentQ-1);\n\t}\n\tconst handleNext = () => {\n\t\tupdateCurrentQ(currentQ+1);\n\t}\n\n\tconst handleUserChoice = (val) => {\n\n\t\tupdateUserChoice({...userChoices, [currentQ]: val})\n\n\t}\n\n\tvar [userChoices, updateUserChoice] = useState(quizDataFromStore.userChoices);\n\tuseEffect(()=> {\n\t\tconst data = {\n\t\t\tuserID: userID,\n\t\t\tquizID: quizID,\n\t\t\tattempted: attempted,\n    \t\tflagged: flagged,\n    \t\tuserChoices: userChoices,\n    \t\tstartedAt: startDate,\n\t\t\tquestions: questionBank,\n\t\t}\n\n\t\t// Updates on Backend\n\t\tdispatch(saveUserChoices());\n\n\t\t// Updates on Redux Store\n\t\tdispatch({type: \"SAVE_USERCHOICES\", payload: data});\n\n\t}, [attempted, flagged, userChoices,dispatch]);\n\n\tconst handleSubmit = (e) => {\n\t\tconst {firstName, lastName, middleName} = userName.studentDoc;\n\t\tconst quizName = quizDataFromStore.questions.subject;\n\t\tconst startedAt = startDate;\n\t\te.preventDefault();\n\t\tif (window.confirm('Confirm Submission'))\n\t\t{\n\t\t\tfetch('/quiz/submitQuiz',{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tmode: 'cors',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({userID, qID: quizID, userChoices, questions: questionBank.questions, firstName, middleName, lastName, startedAt, quizName})\n\t\t\t }).then(data => data.json().then(newData => {\n\t\t\t\tconsole.log(JSON.stringify(newData));\n\t\t\t\t if(newData.msg){\n\t\t\t\t\t alert(\"Error\");\n\t\t\t\t }else{\n\t\t\t\t\t//dispatch({type: \"QUIZ_RESET\"})\n\t\t\t\t\thistory.replace('/home');\n\t\t\t\t\t \n\t\t\t\t }\n\t\t\t })).catch(err => console.log(err))\n\n\t\t}\n\t}\n\n  return (\n    <div>\n      <Grid container justify={'center'} spacing={2}>\n        <Grid item xs={12} >\n        \t<QuizHeader prn={userData.prn} status=\"Valid\"/>\n        </Grid>\n\t\t<Grid item container spacing={2} xs={12}>\n\t\t\t<Grid item xs={8}>\n\t\t\t\t<Card>\n\t\t\t\t<QuestionBody onFlagged={handleFlagged} onAttempted={handleAttempted} currentQ={questionBank.questions[currentQ - 1]} no = {currentQ} flagged={flagged} userChoice={userChoices[currentQ.toString()]} updateUserChoice={handleUserChoice}/>\n\t\t\t\t<CardActions>\n\t\t\n\t\t\t{\n\t\t\t(currentQ !== 1) ?\n\t\t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handlePrev}>\n\t\t\t\tPrev\n\t\t\t</Button>:<></>\n\t\t  }\n\t\t  {currentQ < questionBank.questions.length?<Button  variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handleNext}>\n          Next\n        </Button>:<></>}\n        \n      </CardActions>\n\t\t\t\t</Card>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={4}>\n\t\t\t\t<Grid item xs={12} container>\n\t\t\t\t\t<QuestionsPanel updateNav={(val)=> updateCurrentQ(val) } qNo={questionBank.questions.length} attemptedQ={attempted} flagged={flagged} current={currentQ}/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t<Button onClick={handleSubmit} variant=\"contained\" style={{background:'green',color: 'white', marginTop: 10}}>\n          Submit\n        </Button>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={8}>\n\t\t\t\t<Countdown onComplete={handleSubmit} date={endDate} />\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n        </Grid>\n\t\t<Grid item xs={12} >\n        \t<h1> © Eye Procotor</h1>\n        </Grid>\n      </Grid>\n      \n    </div>\n  );\n}\n\nexport default Quiz;\n",["193","194"],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\TempLanding.js",["195"],"import {useHistory } from \"react-router-dom\";\nimport {useEffect, useRef, useState} from 'react';\nimport {Button, CardContent, Card, Typography, Grid} from '@material-ui/core';\nimport Webcam from \"react-webcam\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useSelector } from \"react-redux\";\n\nconst TempLanding = (props) => {    \n    const quizData = useSelector(state => state.quiz.questions)\n    const webCamRef = useRef(null);\n    const videoConstraints = {facingMode: 'user'};\n    const [camActive, setCamActive] = useState(false);\n    const history = useHistory();\n    const quizPage = `/quiz/${props.match.params.quizID}/${props.match.params.userID}`;\n\n    useEffect(()=>{\n        navigator.mediaDevices.getUserMedia({video: true}).then(\n            (stream) => {\n                setCamActive(true);\n                stream.oninactive = () => {history.go(0)}\n                stream.onremovetrack = () => {history.go(0)}\n            }\n        ).catch((err)=> console.log(err));\n    },[]);\n    return(\n        \n\n        <>\n        <Grid container spacing={2}>\n\n                <Grid item xs={6} style={{marginTop:100}}>\n                    <Card style={{marginLeft:150,marginRight:100,background:'#1e88e5'}}>\n                        <CardContent style={{marginTop:15,color:'white'}}>\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:800}}>\n                            Subject :\n                        </Typography>\n\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:500,marginLeft:10}}>\n                            {quizData.subject}\n                        </Typography>\n                        <br/>\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:800}}>\n                            Time :\n                        </Typography>\n\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:500,marginLeft:10}}>\n                            {quizData.duration} Minutes\n                        </Typography>\n                        </CardContent>\n                        </Card>\n                </Grid>\n\n                <Grid item xs={6}>\n                        <Webcam  style={{width:550,marginTop:20}}\n                        audio={false}\n                        ref={webCamRef}\n                        videoConstraints={videoConstraints}\n                        />\n                        <br/>\n                        {\n                    camActive?<Button variant='contained' color='primary' onClick={()=> {\n                        history.replace(quizPage);\n                    }} style={{background:'#03A9F4',color:'white',marginTop:10}}>Take Quiz</Button>\n                    :<Alert severity=\"error\"> Please Allow Camera Access</Alert>\n                }\n                        \n                        {/* Capture Button can be triggered in Attempt quiz Button\n                        <button onClick={capture}>Capture photo</button> */}\n                \n                </Grid>\n                <hr/>\n                <Grid item xs={12} style={{background:'#274056',paddingBottom:'25%'}}>\n                    <br/>\n\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:600,marginLeft:200,color:'white'}}>\n                            Instructions :\n                        </Typography>\n                        <Typography style={{fontWeight:300,marginLeft:215,color:'white'}}>\n                            <ul>\n                            <li>Select an answer for every question. Unanswered questions will be scored as incorrect.</li>\n                            <li>Timing - You will need to complete each of your attempts in one sitting, as you are allotted {quizData.duration} minutes to complete each attempt.</li>\n                            <li>Answers - You may review your answer-choices and compare them to the correct answers after your final attempt.</li>\n                            <li>To start, click the \"Take the Quiz\" button. When finished, click the \"Submit Quiz\" button.</li>\n                            <li>Click on the Submit button at the bottom of the page to have your answers graded.</li>\n                            </ul>\n                        </Typography>\n\n                </Grid>\n\n            </Grid>\n        </>\n\n    );\n}\n\n\n\nexport default TempLanding;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\MalpracticeGallary.js",["196"],"import { CircularProgress, Grid } from '@material-ui/core'\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nconst MalpracticeGallary = (props) => {\n    const quizID =  props.match.params.quizID;\n    const userID =  props.match.params.userID;\n    const [images, setImages] = useState([])\n    const [isLoading, setLoading] = useState(true);\n    const [err,setErr] = useState(false);\n    const history = useHistory();\n    useEffect(()=>{\n        // Query Data base for Images\n        fetch(`/quiz/malpracticeLog/${userID}/${quizID}`).then(\n            data => {\n                data.json().then(resData =>{\n                    setLoading(false);\n                    if(data.msg){\n                        setErr(true);\n                    }else{\n                        setImages(resData);\n                        console.log(JSON.stringify(resData))\n                    }\n                })\n            }\n        ).catch(err => {\n            setLoading(false);\n            setErr(true);\n            console.error(err);\n        })\n    },[]);\n    if(isLoading)\n        return(\n            <div className=\"center\">\n                <CircularProgress />\n            </div>\n        );\n    else if(err)\n            return(\n                <Alert onClose={()=>{history.go(-1)}} severity=\"error\">\n                    <AlertTitle>Error</AlertTitle>\n                    Unauthorized Access or Server Error\n                </Alert>\n            );\n    else\n    return(\n        <Grid container>\n            {\n                images.length === 0? <Alert severity=\"info\" ><AlertTitle>Info</AlertTitle>No Images Present</Alert>:\n                images.map((img) => {\n                    const imgBuffer = Buffer.from(img.image.data);\n                    return(\n                        <Grid item xs={4}>\n                            <img src={imgBuffer} alt=\"mal\"/>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    );\n}\n\nexport default MalpracticeGallary;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\TeacherQuizLanding.js",["197"],"import { AppBar, Grid } from \"@material-ui/core\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from \"react-redux\";\nimport CustomBox from '../Helper/CustomBox';\nimport QuizDownload from './QuizDownload';\nconst TeacherQuizLanding = (props) => {\n    const quizId = props.match.params.quizID;\n    const [quizData, setQuizData] = useState([]);\n    const [subject, setSubject] = useState(null);\n    useEffect( () => {\n        fetch(`/quiz/getAll/${quizId}`)\n         .then(data =>  data.json().then(res => {setQuizData(res);\n         setSubject(res[0].quizName);\n         }))\n         .catch(err => console.log(err));\n     },[]);\n    const quizObj =  useSelector(state => state.currentCourse.quizes);\n    console.log(quizObj);\n    return(\n        <>\n            <div className='ch-container'>\n            <div style={{padding:'5px'}}>\n                <AppBar position='static' className='Appbar'>\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\n                            {quizObj[0].subject}\n                        </Grid>\n                    </Grid>\n                </AppBar>\n            </div>\n                <Grid style={{marginTop: '10vh'}} container>\n                    <Grid item xs={2}>\n                        <QuizDownload quizData={quizData} subject={subject} />\n                    </Grid>\n                    <Grid>\n                        <CustomBox innerText=\"Delete Quiz\" />\n                    </Grid>\n                    \n                </Grid>\n            </div>\n        </>\n    );\n}\n\nexport default TeacherQuizLanding;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\HomePage.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\OE\\CreateRoom.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\OE\\Room.js",["198","199"],"import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n    height: 40%;\n    width: 50%;\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <StyledVideo playsInline autoPlay ref={ref} />\n    );\n}\n\n\nconst videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n};\n\nconst Room = (props) => {\n    const [peers, setPeers] = useState([]);\n    const socketRef = useRef();\n    const userVideo = useRef();\n    const peersRef = useRef([]);\n    const roomID = props.match.params.roomID;\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"/\");\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n            socketRef.current.emit(\"join room\", roomID);\n            socketRef.current.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })\n\n            socketRef.current.on(\"user joined\", payload => {\n                const peer = addPeer(payload.signal, payload.callerID, stream);\n                peersRef.current.push({\n                    peerID: payload.callerID,\n                    peer,\n                })\n\n                setPeers(users => [...users, peer]);\n            });\n\n            socketRef.current.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n        })\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\n        })\n\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n    return (\n        <Container>\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\n            {peers.map((peer, index) => {\n                return (\n                    <Video key={index} peer={peer} />\n                );\n            })}\n        </Container>\n    );\n};\n\nexport default Room;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizCreation\\QuizCreator.js",["200"],"import {useState, useEffect} from \"react\"\nimport {useDispatch, useSelector} from 'react-redux';\nimport {TextField,Grid,Button,Checkbox,FormControlLabel, CircularProgress} from '@material-ui/core';\nimport {Alert, AlertTitle} from '@material-ui/lab'\nimport {useHistory} from 'react-router-dom'\n\nconst QuizCreator = (props) => {\n    const dispatch = useDispatch();\n\tconst history = useHistory();\n    const state = useSelector(state => state.quizCreator);\n\tconst courseID = props.match.params.courseID;\n\tconst [isLoading, setLoading] = useState(false);\n    const [isBad,setBad] = useState(false);\n    const [isSuccess, setSuccess] = useState(false);\n    const [errMessage, setErrMessage] = useState(\"\");\n\tconsole.log(courseID);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\t\tsetBad(false);\n\t\tsetSuccess(false);\n\t\tsetLoading(true);\n\t\tsetErrMessage(\"\");\n\t\t// Do Simple form Check\n\n\t\tdispatch({type: \"SET_QUIZCOURSE\", payload: courseID})\n\n\t\tconsole.log(JSON.stringify(state));\n\n\t\tfetch(\"/quiz/addQuiz\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(state)\n\t\t}).then(data => data.json().then( (newData)=>\n\t\t\t{\n\t\t\t\tconsole.log(JSON.stringify(newData));\n\t\t\t\tif(newData.msg){\n\t\t\t\t\tsetBad(true);\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\tsetErrMessage(newData.msg);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsetSuccess(true);\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t}\n\t\t\t}\n\t\t)).catch(err => console.log(err))\n\n    }\n\n    const addQuestion = () => {\n        dispatch({type: \"ADD_QUESTION_TEMPLATE\"});\n    }\n    const addOption = (QIndex) => {\n        dispatch({type: \"ADD_OPTION_TEMPLATE\", payload:{QIndex}});\n    }\n    return(\n        <form  onSubmit={handleSubmit} noValidate autoComplete=\"off\" center=\"true\" margin=\"20px\">\n\t\t\t\t<Grid container spacing={3} alignItems=\"center\" style={{padding:50 ,backgroundColor:\"beige\"}}>\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t<TextField onChange = {(e)=> {dispatch({type:\"SET_QUIZ_SUBJECT\", payload: e.target.value})}} id=\"quizsub\" label=\"Quiz Subject\" variant=\"outlined\" fullWidth/>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t<TextField fullWidth\n\t\t\t\t\t\t\tid=\"datetime-start\"\n\t\t\t\t\t\t\tlabel=\"Start Date Time\"\n\t\t\t\t\t\t\ttype=\"datetime-local\"\n\t\t\t\t\t\t\tdefaultValue=\"2017-05-24T00:00\"\n\t\t\t\t\t\t\tonChange = {(e)=> {dispatch({type:\"SET_STARTDATE\", payload: new Date(e.target.value)})}}\n\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\tshrink: true,}}/>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t<TextField fullWidth\n\t\t\t\t\t\t\tid=\"datetime-end\"\n\t\t\t\t\t\t\tlabel=\"End Date Time\"\n\t\t\t\t\t\t\ttype=\"datetime-local\"\n\t\t\t\t\t\t\tdefaultValue=\"2020-01-24T00:00\"\n\t\t\t\t\t\t\tonChange = {(e)=> {dispatch({type:\"SET_ENDDATE\", payload: new Date(e.target.value)})}}\n\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\tshrink: true,}}/>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t<TextField onChange = {(e)=> {dispatch({type:\"SET_DURATION\", payload: e.target.value})}} type=\"number\" id=\"dur\" label=\"Duration in minutes\" variant=\"outlined\" fullWidth/>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.questions.map((val, idx)=> {\n\t\t\t\t\t\t\t\tlet queId = `que-${idx+1}`\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Grid item xs={10}>\n\t\t\t\t\t\t\t\t\t<div key={idx}>\n\t\t\t\t\t\t\t\t\t<Grid container spacing={3} alignItems=\"center\">\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={10}><TextField fullWidth\n\t\t\t\t\t\t\t\t\t\tlabel={\"Question#\"+idx}\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tname={queId}\n\t\t\t\t\t\t\t\t\t\tdata-id={idx}\n\t\t\t\t\t\t\t\t\t\tid={queId}\n\t\t\t\t\t\t\t\t\t\tvalue= {val.question}\n\t\t\t\t\t\t\t\t\t\tonChange = {(e)=> dispatch({type: \"ADD_QUESTION\", payload: {QIndex: idx, question: e.target.value}})}\n\t\t\t\t\t\t\t\t\t\tclassName=\"question-text\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t\t<Button label=\"+Add Option\" variant=\"outlined\" onClick={()=>addOption(idx)}>+ Add Option</Button>\n\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t</div>\n                                    {\n\t\t\t\t\t\t\tstate.questions[idx].options.map((val, oIdx)=> {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={oIdx}>\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={2}>\n                                        <FormControlLabel control={\n                                        <Checkbox checked={val.ans} onChange={()=> dispatch({type: \"SET_ANSWER\", payload: {QIndex: idx, OIndex: oIdx}})} color=\"primary\" inputProps={{ 'aria-label': 'secondary checkbox' }} />\n                                        \n                                        } label={\n\t\t\t\t\t\t\t\t\t\t\t<TextField fullWidth label={`Option No.${oIdx+1}`} value={val.qs} onChange={(e)=> {dispatch({type:\"ADD_OPTION\", payload:{QIndex: idx, OIndex: oIdx, option: e.target.value}})}}/>\n\t\t\t\t\t\t\t\t\t\t} />\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<Button variant=\"outlined\" onClick={addQuestion}>+ Add Question</Button>\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t{isLoading ?<CircularProgress />:<Button type=\"submit\" variant=\"contained\" color=\"primary\">Create Quiz</Button>}\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid container item xs={12} justify=\"center\" alignItems=\"center\">\n                            {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\n                    </Grid>\n                    <Grid container item justify=\"center\" alignItems=\"center\">\n                            {isSuccess ?<Alert variant=\"filled\" severity=\"success\">Quiz Created!</Alert>:<></>}\n                    </Grid>\n\t\t\t\t</Grid>\n\t\t\t</form>\n    );\n}\n\nexport default QuizCreator;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Coding\\CodeUI.js",["201","202"],"import {useState} from 'react';\nimport {Typography, FormControl, Select, MenuItem, InputLabel, Grid, CircularProgress, AppBar } from '@material-ui/core';\nimport Editor from \"@monaco-editor/react\";\nimport Button from '@material-ui/core/Button';\n\n\nconst CodeUI = () => {\n\n    const [Code, setCode] = useState(\"print('Hi')\");\n    const [language, setLanguage] = useState(\"Java\");\n    const [Output, setOutput] = useState(\"Type and Click on Run\");\n    const [isLoading, setLoading] = useState(false);\n\n    function fetchResult(sid) {\n        fetch(\"/code/fetchResult\",\n            {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    sid\n                })\n            }\n        ).then(\n            (res) => res.json().then(resData => {\n                if (resData.status === 'IN-QUEUE') {\n                    return fetchResult(sid);\n                }\n                \n                setOutput(resData.output);\n                setLoading(false);\n                return;\n            })\n        ).catch(err => console.log(err)).catch(err => { setLoading(false); setOutput(\"Server Error\"); console.log(err)});\n    }\n    function SubmitForm(e) {\n        setLoading(true);\n        e.preventDefault();\n        fetch(\"/code/compile\",\n            {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    lang: language,\n                    code: Code,\n                    input: \"\",\n                    save: false\n                })\n            }\n        ).then(\n            (res) => res.json().then(resData => fetchResult(resData.sid))\n        ).catch(err => console.log(err)).catch(err => console.log(err));\n\n\n\n    }\n    document.oncontextmenu = new Function(\"return false;\");\n    return (\n        <div className='ch-container'>\n            <div style={{padding:'5px'}}>\n                    <AppBar position='static' className='Appbar'>\n                        <Grid container style={{justifyContent:'space-between',position:'relative'}}>\n                            <Grid item style={{display:'flex',justifyContent:'space-between'}}>\n                                <img src='logo_trans.png' className='logo'></img>\n                                <div style={{display:'inline-block',verticalAlign:'middle',textAlign:'center',color:'#fec14e'}}>\n                                    <h1 style={{position:'relative',top:'50%',transform: 'translateY(-50%)'}}>Proctor</h1>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </AppBar>\n                </div>\n            \n            <form  onSubmit={SubmitForm}>\n                <Grid style={{marginTop: '11vh'}} className=\"ch-container\" container >\n                    <Grid item xs={8}>\n                        <Editor\n                        value = {Code}\n                        onChange ={(e)=> {setCode(e)}}\n                        marginLeft='100px'\n                        height='80vh'\n                        theme='vs-dark'\n                        defaultLanguage=\"Java\"\n                        fontSize = '30px'\n                        options = {{\"fontSize\": \"19\"}}\n                        />\n                    </Grid>\n                    <Grid item xs={4}>\n                        <Grid  container item direction=\"column\" justify=\"center\" alignItems=\"center\">\n                            <Grid item xs={12} fullWidth>\n                                <FormControl fullWidth>\n                                    <InputLabel id=\"language\" >Language</InputLabel>\n                                    <Select value={language} onChange={(e)=>{setLanguage(e.target.value)}} labelId=\"language\" label=\"Language\">\n                                        <MenuItem value={\"C\"}>C</MenuItem>\n                                        <MenuItem value={\"Cpp\"}>Cpp</MenuItem>\n                                        <MenuItem value={\"Java\"}>Java</MenuItem>\n                                        <MenuItem value={\"Python3\"}>Python</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={12}>\n                                 <Typography variant='subtitle1' color=\"secondary\"> Problem Statement </Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography variant='body1' color=\"primary\"> Write a Program to add 2 Numbers </Typography>\n                            </Grid>\n                            <Grid container item alignContents=\"center\" alignItems=\"center\" justify=\"center\" >\n                                <Grid item xs={12}>\n                                    {isLoading? <CircularProgress />:<Button type=\"submit\" color=\"primary\">Run</Button>}\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Button color=\"primary\">Submit</Button>\n                                </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography variant='subtitle1' color=\"secondary\"> Output </Typography>\n                            </Grid>\n                            <Grid item >\n                                <textarea onChange={(e) => setOutput(e.target.value)} value={Output}\n                                readOnly\n                                className = 'terminal-textArea'\n                                rows=\"24\"\n                                cols = \"50\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    );\n}\n\nexport default CodeUI;\n\n// const render = \n// <Grid className=\"ch-container\" container >\n//     <Grid item xs={8}>\n//         <Editor\n//         value = {Code}\n//         onChange ={(e)=> {setCode(e)}}\n//         marginLeft='100px'\n//         height='100vh'\n//         theme='vs-dark'\n//         defaultLanguage=\"Java\"\n//         width='75vw'\n//         fontSize = '30px'\n//         options = {{\"fontSize\": \"19\"}}\n//         />\n//     </Grid>\n//     <Grid item xs={4}>\n//         <Grid  container direction=\"column\" justify=\"space-evenly\" alignItems=\"flex-start\">\n//             <Grid item xs={8}>\n//                 <FormControl required fullWidth variant=\"outlined\">\n//                     <InputLabel id=\"language\" >Language</InputLabel>\n//                     <Select value={language} onChange={(e)=>{setLanguage(e.target.value)}} labelId=\"language\" label=\"Language\">\n//                         <MenuItem value={\"C\"}>C</MenuItem>\n//                         <MenuItem value={\"Cpp\"}>Cpp</MenuItem>\n//                         <MenuItem value={\"Java\"}>Java</MenuItem>\n//                         <MenuItem value={\"Python3\"}>Python</MenuItem>\n//                     </Select>\n//                 </FormControl>\n//             </Grid>\n//             <Grid item xs={12}>\n//                 <Box borderBottom={1}>\n//                      <Typography> Problem Statement </Typography>\n//                 </Box>\n//             </Grid>\n//             <Grid item xs={12}>\n//                 <Box borderBottom={1}>\n//                     <Typography> Write a Program to add 2 Numbers </Typography>\n//                 </Box>\n//             </Grid>\n//             <Grid item xs={12}>\n//                 <Box borderBottom={1}>\n//                     <Typography> Write a Program to add 2 Numbers </Typography>\n//                 </Box>\n//             </Grid>\n//             <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"flex-start\">\n//                 <Grid item xs={6}>\n//                     <Button variant=\"contained\" color=\"primary\">Run</Button>\n//                 </Grid>\n//                 <Grid item xs={6}>\n//                     <Button variant=\"contained\" color=\"primary\">Submit</Button>\n//                 </Grid>\n//             </Grid>\n//             <Grid item xs={12}>\n//                 <Box mt={4} border={1}>\n//                     <Typography> Output </Typography>\n//                 </Box>\n//             </Grid>\n//         </Grid>\n//     </Grid>\n// </Grid>","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateStudent\\CreateStudent.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\CreateCourse.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\AdminHome.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\AssignCourse.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Student\\CourseHome.js",["203","204"],"import {AppBar, Box, Grid, Toolbar} from '@material-ui/core'\nimport { useSelector } from 'react-redux';\nimport CustomBox from '../../Helper/CustomBox'\nimport {Alert} from '@material-ui/lab'\nimport { useHistory } from 'react-router';\nconst CourseHome = (props) => {\n    const courseID = props.match.params.courseName;\n    const courses =  useSelector(state => state.course);\n    const course = courses.filter((e)=> e._id === courseID)[0]\n    const quizes = course.quizes;\n    const poes = course.poes;\n    const history = useHistory();\n    const oes = course.oes;\n    return(\n        <div className='ch-container'>\n            <div style={{padding:'5px'}}>\n                <AppBar position='static' className='Appbar'>\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\n                            {course.courseName}\n                        </Grid>\n                    </Grid>\n                </AppBar>\n            </div>\n            <Grid className='cor' style={{margin:'0'}} container>\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\n                    <Box p={2} boxShadow={5} borderBottom={1}>\n                        Quizes\n                    </Box>\n                </Grid>\n                {(quizes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >Nothing Here</Alert></Grid>:\n                quizes.map((quizObj)=> <CustomBox key={quizObj.quizID} innerText={quizObj.subject} onClick={()=> {history.push(`quiz/${quizObj.quizID}`)}}/>)}\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\n                    <Box p={2} boxShadow={5} borderBottom={1}>\n                        Practicals\n                    </Box>\n                </Grid>\n                {(poes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >Nothing Here</Alert></Grid>:<></>}\n\n            </Grid>\n        </div>\n    );\n}\n\nexport default CourseHome;\n\n\n","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Login\\Login.js",["205","206","207"],"import {TextField,Grid,Button,Checkbox,FormControlLabel,Paper, CircularProgress} from '@material-ui/core';\nimport {useEffect, useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\nimport {Alert, AlertTitle} from '@material-ui/lab'\n\n\nconst style = {\n                maxWidth:'40%',\n                minWidth:'400px',\n                padding:'30px' ,\n                margin:'auto',\n                marginTop:\"5vh\",\n                // backgroundColor:'#4c5f7a',\n                backgroundColor:'white',\n                color:'black',\n                textAlign:'center',\n                borderRadius:'10pt',\n                fontWeight:'bold'\n            };\n\nconst Login = () =>  {\n    \n    const [userName, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [isLoading, setLoading] = useState(false);\n    const [isBad,setBad] = useState(false);\n    const [errMessage, setErrMessage] = useState(\"\");\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch({ type:\"RESET_STORE\"});\n    },[])\n\n    function onSuccess(resData){setLoading(false);\n        if(resData.msg){\n            setBad(true);\n            setErrMessage(resData.msg);\n        }\n        else{\n            dispatch({type: \"AUTHENTICATE\", payload: resData});\n            history.replace(\"/home\");\n        }\n    }\n\n    const handleSubmit = (e) => {\n        setBad(false);\n        setLoading(true);\n        e.preventDefault();\n        // alert(userName + \" \" + password);\n        fetch(\n            \"/user/login\",\n            {\n                method: \"POST\",\n                mode: 'cors',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(\n                    {\n                        userName,\n                        password,\n                    }\n                )\n            }\n        ).then(\n            response => response.json().then( data => onSuccess(data))\n        ).catch((err) => {console.error(err)});\n    }\n\n    return(\n        <form onSubmit={handleSubmit} style={{height:'100vh',width:'100vw', background: 'linear-gradient(135deg, #364755 50%, #182835 50%)',position:'absolute',top:'0',left:'0'}}>\n            <img src=\"logo_trans.png\" style={{maxWidth:'100px'}} />\n            <div style={{display:'inline-block',position:'absolute',top:'30px',textAlign:'center',color:'#fec14e'}}>\n                <h1>Proctor</h1>\n            </div>\n            <div style={style}>\n                <Grid container spacing={8} alignItems=\"center\">\n                    <Grid item md={2} sm={true} xs={true}>\n                        <h1>Login</h1>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={8} alignItems=\"flex-end\">\n                    {/* <Grid item md={3}>Username</Grid> */}\n                    <Grid item md={12} sm={12} xs={12}>\n                        <TextField onChange={(e)=> {setUserName(e.target.value)}} value={userName} id=\"usrn\" margin=\"normal\" variant=\"outlined\" label=\"Username\" type=\"text\" fullWidth required />\n\n                    </Grid>\n                </Grid>\n                <Grid container spacing={8} alignItems=\"flex-end\">\n                    {/* <Grid item md={3}>Password</Grid> */}\n                    <Grid item md={12} sm={12} xs={12}>\n                        <TextField onChange={(e)=> {setPassword(e.target.value)}} value={password} id=\"pswd\" margin=\"normal\" variant=\"outlined\" label=\"Password\" type=\"password\" fullWidth required />\n     </Grid>\n                </Grid>\n                <Grid container alignItems=\"center\" justify=\"space-between\" style={{marginTop:'5vh'}}>\n                    <Grid item>\n                        <FormControlLabel control={\n                            <Checkbox\n                                color=\"secondary\"\n                            />\n                        } label=\"Remember me\" />\n                    </Grid>\n                    <Grid item>\n                        <Button disableFocusRipple disableRipple style={{ textTransform: \"none\" }} variant=\"text\" color=\"primary\">Forgot password ?</Button>\n                    </Grid>\n                </Grid>\n                <Grid container justify=\"center\" style={{ marginTop: '2%' }}>\n                    <Grid item md={4} fullWidth>\n                        {isLoading ?\n                        <CircularProgress />\n                        :<Button  type=\"submit\" variant=\"contained\" style={{ textTransform: \"none\", backgroundColor:\"#fec14e\",color:\"white\",minWidth:\"100px\",fontWeight:'bolder',fontSize:'medium',borderRadius:'5pt'}}>Login</Button>}\n                        \n                    </Grid>\n                </Grid>\n                <Grid container justify=\"center\" style={{ marginTop: '2%' }}>\n                    <Grid item md={4} fullWidth>\n                        {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\n                    </Grid>\n                </Grid>\n                \n            </div>\n        </form>\n    );\n}\n\nexport default Login;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\admin\\CreateTeacher\\CreateTeacher.js",["208","209"],"import {TextField, FormControl, Select, MenuItem, InputLabel, Grid, Button, Box, CircularProgress} from '@material-ui/core'\nimport {Alert, AlertTitle} from '@material-ui/lab'\nimport {useState} from 'react';\n\nconst CreateTeacher = () => {\n    const [firstName, setFName] = useState(\"\");\n    const [lastName, setLName] = useState(\"\");\n    const [middleName, setMName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [branch, setBranch] = useState(\"None\");\n    const [Class, setClass] = useState(\"None\");\n    const [isLoading, setLoading] = useState(false);\n    const [isBad,setBad] = useState(false);\n    const [isSuccess, setSuccess] = useState(false);\n    const [errMessage, setErrMessage] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        setLoading(true);\n        setErrMessage(false);\n        setSuccess(false);\n        e.preventDefault();\n\n        const userName = lastName.toLowerCase() + \".\" + middleName.toLowerCase() + \".\" + firstName.toLowerCase();\n        const password = \"changeme\";\n        const userType = \"Teacher\";\n        const teacherData = {\n            firstName,middleName,lastName,branch\n        }\n        const studentData = {}\n        const reqBody = {\n            userName, email, password , userType, studentData , teacherData\n        }\n\n        console.log(JSON.stringify(reqBody));\n\n        fetch(\n            \"/user/register\",\n            {\n                method: \"POST\",\n                mode: 'cors',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(reqBody)\n            }\n        ).then(\n            response => response.json().then( data => {\n                console.log(JSON.stringify(data));\n                setLoading(false);\n                if(data.msg){\n                    setBad(true);\n                    setErrMessage(data.msg);\n                }else\n                    setSuccess(true);\n            })\n        ).catch((err) => {\n            console.error(err); \n            setLoading(false);\n            setBad(true);\n            setErrMessage(JSON.stringify(err));\n        }\n            );\n\n        \n        \n    }\n    return(\n        <div>\n            <form onSubmit={handleSubmit}>\n                <Grid container style={ {flexGrow: 1, marginTop: 25, padding: 10} } spacing={2}>\n                    <Grid item xs={4} >\n                        <TextField value={firstName} onChange={(e)=> setFName(e.target.value)} fullWidth required label=\"First Name\" variant=\"outlined\"/>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <TextField value={middleName} onChange={(e)=>setMName(e.target.value)} fullWidth required label=\"Middle Name\" variant=\"outlined\"/>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <TextField value={lastName} onChange={(e)=> setLName(e.target.value) } fullWidth required label=\"Last Name\" variant=\"outlined\"/>\n                    </Grid>\n                \n                    <Grid item xs={4}>\n                        <TextField value={email} onChange={(e)=>{setEmail(e.target.value)}} fullWidth required label=\"Email\" variant=\"outlined\"/>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <TextField value={phone} onChange={(e)=>{setPhone(e.target.value)}} type=\"number\" fullWidth required label=\"Phone Number\" variant=\"outlined\"/>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                        <FormControl required fullWidth variant=\"outlined\">\n                            <InputLabel id=\"branchDD\" >Branch</InputLabel>\n                            <Select value={branch} onChange={(e)=>{setBranch(e.target.value)}} labelId=\"branchDD\" label=\"Branch\">\n                                <MenuItem value={\"biotech\"}>BioTech</MenuItem>\n                                <MenuItem value={\"civil\"}>Civil</MenuItem>\n                                <MenuItem value={\"cse\"}>CSE</MenuItem>\n                                <MenuItem value={\"electronics\"}>Electronics</MenuItem>\n                                <MenuItem value={\"mech\"}>Mechanical</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Grid>\n\n                    <Grid container item justify=\"center\" alignItems=\"center\">\n                        <Box mt={5}>\n                        {isLoading ?<CircularProgress />:<Button type=\"submit\" variant=\"contained\" color=\"primary\">Create Teacher</Button>}\n                        </Box>\n                    </Grid>\n                    <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\n                            {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\n                    </Grid>\n                    <Grid container item justify=\"center\" alignItems=\"center\">\n                            {isSuccess ?<Alert variant=\"filled\" severity=\"success\">Teacher Created!</Alert>:<></>}\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateTeacher;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherCourse.js",["210","211"],"import {AppBar, Box, Button, Grid, Toolbar} from '@material-ui/core'\nimport { useSelector } from 'react-redux';\nimport CustomBox from '../../Helper/CustomBox'\nimport {Alert} from '@material-ui/lab'\nimport { useHistory } from 'react-router';\n\nconst TeacherCourseHome = (props) => {\n    const courseID = props.match.params.courseName;\n    const courses =  useSelector(state => state.course);\n    const course = courses.filter((e)=> e._id === courseID)[0]\n    const quizes = course.quizes;\n    const poes = course.poes;\n    const oes = course.oes;\n    const history = useHistory();\n    console.log(course);\n    return(\n        <div className='ch-container'>\n            <div style={{padding:'5px'}}>\n                <AppBar position='static' className='Appbar'>\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\n                            {course.courseName}\n                        </Grid>\n                    </Grid>\n                </AppBar>\n            </div>\n            \n            <Grid className='cor' style={{margin:'0'}} container>\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\n                    <Box p={2} boxShadow={5} borderBottom={1}>\n                        Quizes\n                    </Box>\n                </Grid>\n                {(quizes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >No Active Quizes</Alert></Grid>:\n                quizes.map((quizObj)=> <CustomBox key={quizObj.quizID} innerText={quizObj.subject} onClick={()=> {history.push(`/teacher/quiz/${quizObj.quizID}`)}}/>)}\n                <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\n                    <Button onClick={()=>{ history.push(`/teacher/createQuiz/${courseID}`) }} variant=\"contained\" color=\"primary\">Create New Quiz</Button>\n                </Grid>\n                <Box border={1}/>\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\n                    <Box p={2} boxShadow={5} borderBottom={1}>\n                        Practicals\n                    </Box>\n                </Grid>\n                {(poes.length === 0)?<Grid  item xs={12} style={{width:'50%'}}><Alert severity=\"error\">No Active Practicals</Alert></Grid>:<></>}\n                <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\n                   <Button onClick={()=>{ history.push('/teacher/createPOE') }} variant=\"contained\" color=\"primary\">Create New Practical</Button>\n                 </Grid>\n                <Box border={1} />\n                \n            </Grid>\n        </div>\n    );\n}\n\nexport default TeacherCourseHome;\n\n\n// import {AppBar, Box, Button, Grid, Toolbar} from '@material-ui/core'\n// import { useSelector } from 'react-redux';\n// import { useHistory } from 'react-router-dom'\n// // import CustomBox from '../../Helper/CustomBox'\n// import {Alert} from '@material-ui/lab'\n// import CustomBox from '../../Helper/CustomBox';\n// const TeacherCourseHome = (props) => {\n//     const courseID = props.match.params.courseName;\n//     const courses =  useSelector(state => state.course);\n//     const course = courses.filter((e)=> e._id === courseID)[0]\n//     const quizes = course.quizes;\n//     const poes = course.poes;\n//     const oes = course.oes;\n//     const history = useHistory();\n//     console.log(course);\n//     return(\n//         <div>\n//             <AppBar>\n//                 <Toolbar stype={{backgroundColor: \"black\" }}>\n//                 {course.courseName}\n//                 </Toolbar>\n//             </AppBar>\n//             <Grid style={{marginTop: 60}} container spacing={2}>\n//                 <Grid item xs={12} style={{textAlign: 'center'}}>\n//                     <Box p={2} boxShadow={3} bgcolor=\"background.paper\" borderBottom={1}>\n//                         Quizes\n//                     </Box>\n//                 </Grid>\n//                 {(quizes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >No Active Quizes</Alert></Grid>:\n//                 quizes.map((quizObj)=> <CustomBox key={quizObj.quizID} innerText={quizObj.subject} onClick={()=> {history.push(`/teacher/quiz/${quizObj.quizID}`)}}/>)}\n//                 <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\n//                     <Button onClick={()=>{ history.push(`/teacher/createQuiz/${courseID}`) }} variant=\"contained\" color=\"primary\">Create New Quiz</Button>\n//                 </Grid>\n//                 <Box border={1}/>\n//                 <Grid item xs={12} style={{textAlign: 'center'}}>\n//                     <Box p={2} boxShadow={3} bgcolor=\"background.paper\" borderBottom={1}>\n//                         Practicals\n//                     </Box>\n//                 </Grid>\n//                 {(poes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >No Active Practicals</Alert></Grid>:<></>}\n//                 <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\n//                     <Button onClick={()=>{ history.push('/teacher/createPOE') }} variant=\"contained\" color=\"primary\">Create New Practical</Button>\n//                 </Grid>\n//                 <Box border={1} />\n                \n//             </Grid>\n//         </div>\n//     );\n// }\n\n// export default TeacherCourseHome;\n","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quizCreator.js",["212"],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Profile\\TeacherProfile.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Profile\\StudentProfile.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\quiz\\quiz.js",["213"],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\course\\courseReducer.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\auth\\authReducers.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\course\\currentCourseReducer.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\reducer\\UI\\uiReducers.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizLandingPage.js",["214","215"],"import { Box, Button, Grid, Typography, AppBar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\n\n\n\nconst QuizLandingPage = (props) => {\n    const quizID = props.match.params.quizID;\n    //console.log(quizID)\n    const [quizData, setQuizData] = useState({})\n    const [isAvailable, setAvailable] = useState(false);\n    const dispatch = useDispatch();\n    const quizState = useSelector(state => state.quiz);\n    const fromStore = quizState.userChoices;\n    const userID = useSelector(state => state.auth.user.id);\n    const [status, setStatus] = useState(true);\n    const history = useHistory();\n\n    useEffect(\n        () => {\n            fetch(`/quiz/getQuiz/${quizID}`).then(\n                data => data.json().then(newData => {\n                    //console.log(JSON.stringify(newData));\n                    setQuizData(newData);\n                    const endDate = new Date(newData.endDate).getTime();\n                    const startDate = new Date(newData.startDate).getTime();\n                    console.log();\n                    if (startDate > Date.now() || endDate < Date.now()) {\n                        setAvailable(false);\n                    } else {\n                        setAvailable(true);\n                    }\n                })\n            );\n\n            fetch('/quiz/quizStatusCheck', {\n                method: \"POST\",\n                mode: 'cors',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ qID: quizID, userID })\n            }).then(data => data.json().then(newData => {\n                setStatus(newData.status);\n            })).catch(err => console.log(err))\n        }, []\n    );\n    const takeQuiz = () => {\n        // Save Current Quiz Data to Store\n        dispatch({ type: \"SET_QUIZDATA\", payload: quizData });\n\n        // Check if UserData StartTime Exists\n        // If store does not have any saved Instances of userChoices\n        if (!fromStore) {\n\n            //Check from Database\n            console.log(\"database Check\")\n            fetch(`/quiz/userChoices/${userID}/${quizID}`).then(data => {\n                data.json().then(newData => {\n                    // No Saved Instance on Database\n                    // New Attempt starts\n                    if (newData.msg) {\n\n                        const newUserChoices = {\n                            userID: userID,\n                            quizID: quizID,\n                            attempted: [],\n                            flagged: [],\n                            userChoices: {},\n                            startedAt: null,\n                            questions: quizData,\n                        }\n                        dispatch({ type: \"SAVE_USERCHOICES\", payload: newUserChoices })\n                        history.push(`${quizID}/${userID}`);\n\n\n                    }\n                    // Saved Instance on Database\n                    else {\n\n                        console.log(JSON.stringify(newData));\n                        const questions = newData.questions[0];\n                        newData = { ...newData, questions: questions };\n                        history.push(`${quizID}/${userID}`);\n                        // Set Start Date from Database\n                        dispatch({ type: \"SAVE_USERCHOICES\", payload: newData })\n\n                    }\n                })\n            });\n        } else {\n            console.log(\"From Store\");\n            console.log(JSON.stringify(quizState));\n            history.push(`${quizID}/${userID}`);\n        }\n    }\n    return (\n        <div className='ch-container'>\n            <div style={{ padding: '5px' }}>\n                <AppBar position='static' className='Appbar'>\n                    <Grid container style={{ justifyContent: 'center', position: 'relative' }}>\n                        <Grid item style={{ fontSize: '30px', fontWeight: 'bold', padding: '20px' }}>\n                            Proctored Quiz\n                        </Grid>\n                    </Grid>\n                </AppBar>\n            </div>\n            <Grid className='cor' style={{ margin: '0' }} container >\n                <Grid item xs={12} style={{ textAlign: 'center', marginTop: '5vh' }}>\n                    <Box p={2} boxShadow={5} borderBottom={1}>\n                        {quizData.subject}\n                    </Box>\n                </Grid>\n                <Grid item xs={12} style={{ textAlign: 'center', marginTop: '5vh' }}>\n                    {\n                        status || !isAvailable ? <Alert severity='warning'> Quiz Not Available </Alert>\n                            : <Button variant='contained' color='primary' onClick={takeQuiz}>Take Quiz</Button>\n                    }\n                </Grid>\n            </Grid>\n        </div>\n\n    );\n}\n\n\nexport default QuizLandingPage;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\service\\userData.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\RightPanel.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Student\\StudentHome.js",["216","217"],"import { AppBar, Grid } from \"@material-ui/core\";\nimport React from 'react';\nimport CustomBox from '../../Helper/CustomBox';\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport {useEffect,useState} from 'react';\nimport {useHistory} from 'react-router-dom'\nimport ProfileMenu from \"../../Login/ProfileMenu.js\";\n\nconst StudentHome = () => {\n    const studentData = useSelector(state => state.auth.studentDoc);\n    const branch = studentData.branch;\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const sem = studentData.sem;\n    const Class = studentData.Class;\n    const[courseList, setCourseList] = useState([])\n    useEffect(()=>{\n        fetch('/course/student/getAll',{\n           method: \"POST\",\n           mode: 'cors',\n           headers: { 'Content-Type': 'application/json' },\n           body: JSON.stringify({branch,Class,sem})\n        }).then(data => data.json().then(newData => {setCourseList(newData); dispatch({type: \"SET_COURSES\", payload: newData})})).catch(err => console.log(err))\n    },[]);\n\n    return(\n        <>\n            <div className='ch-container'>\n                <div style={{padding:'5px'}}>\n                    <AppBar position='static' className='Appbar'>\n                        <Grid container style={{justifyContent:'space-between',position:'relative'}}>\n                            <Grid item style={{display:'flex',justifyContent:'space-between'}}>\n                                <img src='logo_trans.png' className='logo'></img>\n                                <div style={{display:'inline-block',verticalAlign:'middle',textAlign:'center',color:'#fec14e'}}>\n                                    <h1 style={{position:'relative',top:'50%',transform: 'translateY(-50%)'}}>Proctor</h1>\n                                </div>\n                            </Grid>\n                            <Grid item style={{justifyContent:'space-between',position:'relative'}}>\n                                <ProfileMenu />\n                            </Grid>\n                        </Grid>\n                    </AppBar>\n                </div>\n                <Grid style={{marginTop: '10vh'}} container>\n                    {\n                        courseList.map((val,idx) => {\n                            return(\n                                <Grid item xs={4} key={idx}>\n                                    <CustomBox innerText={val.courseName} onClick={()=>{\n                                        history.push(`/course/${val._id}`)\n                                    }}/>\n                                </Grid>\n                            );\n                        })\n                    }\n                    \n                </Grid>\n            </div>\n        </>\n    );\n}\n\nexport default StudentHome;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherHome.js",["218","219","220","221"],"import { AppBar, Toolbar, Card, Grid } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport CustomBox from '../../Helper/CustomBox';\nimport ProfileMenu from \"../../Login/ProfileMenu.js\";\n\n\nconst TeacherHome = () => {\n    const user = useSelector(state => state.auth.user)\n    const[courseList, setCourseList] = useState([])\n    const dispatch = useDispatch();\n    const history = useHistory();\n    useEffect(()=>{\n        const teacherID = user.teacherData;\n        console.log(JSON.stringify(user))\n        fetch('/teacher/getAllCourses',{\n           method: \"POST\",\n           mode: 'cors',\n           headers: { 'Content-Type': 'application/json' },\n           body: JSON.stringify({teacherID})\n        }).then(data => data.json().then(newData => {setCourseList(newData); dispatch({type: \"SET_COURSES\", payload: newData})})).catch(err => console.log(err))\n    },[]);\n\n    return(\n        <>\n            <div className='ch-container'>\n                <div style={{padding:'5px'}}>\n                    <AppBar position='static' className='Appbar'>\n                        <Grid container style={{justifyContent:'space-between',position:'relative'}}>\n                            <Grid item style={{display:'flex',justifyContent:'space-between'}}>\n                                <img src='logo_trans.png' className='logo'></img>\n                                <div style={{display:'inline-block',verticalAlign:'middle',textAlign:'center',color:'#fec14e'}}>\n                                    <h1 style={{position:'relative',top:'50%',transform: 'translateY(-50%)'}}>Proctor</h1>\n                                </div>\n                            </Grid>\n                            <Grid item style={{justifyContent:'space-between',position:'relative'}}>\n                                <ProfileMenu />\n                            </Grid>\n                        </Grid>\n                    </AppBar>\n                </div>\n                <Grid style={{marginTop: '10vh'}} container>\n                    {\n                        courseList.map((val,idx) => {\n                            return(\n                                <Grid item xs={4} key={idx}>\n                                    <CustomBox innerText={val.courseName} onClick={()=>{\n                                        dispatch({type: \"SET_CURRENT_COURSE\", payload: val});\n                                        history.push(`/course/teacher/${val._id}`);\n                                    }}/>\n                                </Grid>\n                            );\n                        })\n                    }\n                </Grid>\n            </div>\n        </>\n    );\n}\n\nexport default TeacherHome;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizHeader.js",["222","223"],"import AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles'; \nimport {Grid } from '@material-ui/core';\nimport Capture from './Capture.js'\nimport { useState, useEffect } from 'react';\nimport * as faceapi from 'face-api.js';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css'; \nimport blankProfile from './blankProfile';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  appBar: {\n  margin: 0,\n  },\n  userIcon:{\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n    marginLeft:'90%',\n    borderRadius: '3rem'\n  }\n  }));\n\nconst QuizHeader = (props) => {\n  const userData = useSelector(state => state.auth.user);\n  const quizSubject = useSelector(state => state.quiz.questions.subject);\n  const quizID = useSelector(state => state.quiz.quizID);\n  useEffect(() => {\n    faceapi.nets.tinyFaceDetector.loadFromUri('/models').then(()=> {console.log(\n      \"Face API Started\"\n    )}).catch((err) => console.log(\"Error Starting FACE API\", err.message));\n    \n    }, []);\n    function warn(message){\n      confirmAlert({\n        title: 'Warning',\n        message: message,\n        buttons: [\n          {\n            label: 'OK',\n            onClick: () => document.documentElement.requestFullscreen().catch((e) => {console.log(e)})\n          }\n        ]\n      });\n    };\n    function saveLog(img){\n      const userID = userData.id;\n      const reqBody = {\n        image: img,\n        userID,\n        quizID\n      }\n\n      fetch('/quiz/malpracticeLog', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(reqBody)\n      }).then( data => {\n        console.log(data);\n      }).catch(err => {\n        console.error(err);\n      })\n\n    }\n    const faceProcessingFunction = (faceData,img) => {\n      console.log(faceData.length)\n      if(faceData.length === 0){\n        warn(\"No Face Detected\")\n        saveLog(img);\n      }\n      else if(faceData.length > 1){\n        warn(\"Multiple Face Detected\")\n        saveLog(img);\n      }\n    }\n\n    const userPRN = props.prn;\n    const status = props.status;\n    //const profile = props.profile;\n    const classes = useStyles();\n    const [ImgSrc,setImgSrc]= useState(blankProfile);\n    const updateImgSrc = (img) => {\n      setImgSrc(img);\n      faceapi.detectAllFaces(\"input\", new faceapi.TinyFaceDetectorOptions()).then((data) => faceProcessingFunction(data,img)).catch((err)=> console.error(err))\n    }\n\n    return(\n        <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar style={{ background: '#274056' ,padding:5}}>\n         \n          <Grid container spacing={2}>\n            \n            <Grid item xs={4}>\n              <Typography variant=\"h5\" style={{fontWeight:500,margin:10}}>\n               {quizSubject}\n              </Typography>\n            </Grid>\n\n            <Grid item xs={4} >\n              <img id=\"input\" src={ImgSrc} className={classes.userIcon}/>\n            </Grid>\n\n            <Grid item xs={3} style={{marginTop:'0.3%'}}>\n              <Typography display=\"inline\" style={{marginLeft:15}} varient=\"h6\">username : </Typography>\n              <Typography display=\"inline\" style={{marginLeft:5}} varient=\"h6\">{userData.name}</Typography>\n              <br/>\n              <Typography display=\"inline\" style={{marginLeft:15}} varient=\"h6\">Status : </Typography>\n              <Typography display=\"inline\" style={{marginLeft:5,color:'#22D400',fontWeight:600}} varient=\"h6\">{status}</Typography>\n            </Grid>\n            <Grid xs={1}>\n              <Capture setImgSrc={updateImgSrc}/>\n            </Grid>\n          </Grid>\n          \n        </Toolbar>\n      </AppBar>\n    );\n}\n\n\nexport default QuizHeader;","G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\QuestionBody.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\QuizDownload.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Helper\\CustomBox.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\QuestionIcon.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Login\\ProfileMenu.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\Capture.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\blankProfile.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\quiz\\questions\\Option.js",[],"G:\\BE\\BTech-G17\\Source Code\\frontend\\src\\components\\Coding\\CreateCodingQuetion.js",["224","225","226","227"],{"ruleId":"228","severity":1,"message":"229","line":66,"column":7,"nodeType":"230","messageId":"231","endLine":66,"endColumn":18},{"ruleId":"228","severity":1,"message":"232","line":31,"column":8,"nodeType":"230","messageId":"231","endLine":31,"endColumn":17},{"ruleId":"233","severity":1,"message":"234","line":96,"column":5,"nodeType":"235","endLine":96,"endColumn":47,"suggestions":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"233","severity":1,"message":"241","line":24,"column":7,"nodeType":"235","endLine":24,"endColumn":9,"suggestions":"242"},{"ruleId":"233","severity":1,"message":"243","line":32,"column":7,"nodeType":"235","endLine":32,"endColumn":9,"suggestions":"244"},{"ruleId":"233","severity":1,"message":"245","line":16,"column":8,"nodeType":"235","endLine":16,"endColumn":10,"suggestions":"246"},{"ruleId":"233","severity":1,"message":"247","line":27,"column":8,"nodeType":"235","endLine":27,"endColumn":10,"suggestions":"248"},{"ruleId":"233","severity":1,"message":"249","line":80,"column":8,"nodeType":"235","endLine":80,"endColumn":10,"suggestions":"250"},{"ruleId":"228","severity":1,"message":"251","line":1,"column":19,"nodeType":"230","messageId":"231","endLine":1,"endColumn":28},{"ruleId":"252","severity":1,"message":"253","line":62,"column":30,"nodeType":"254","messageId":"255","endLine":62,"endColumn":59},{"ruleId":"256","severity":1,"message":"257","line":69,"column":33,"nodeType":"258","endLine":69,"endColumn":76},{"ruleId":"228","severity":1,"message":"259","line":1,"column":28,"nodeType":"230","messageId":"231","endLine":1,"endColumn":35},{"ruleId":"228","severity":1,"message":"260","line":13,"column":11,"nodeType":"230","messageId":"231","endLine":13,"endColumn":14},{"ruleId":"228","severity":1,"message":"261","line":1,"column":57,"nodeType":"230","messageId":"231","endLine":1,"endColumn":62},{"ruleId":"233","severity":1,"message":"262","line":34,"column":7,"nodeType":"235","endLine":34,"endColumn":9,"suggestions":"263"},{"ruleId":"256","severity":1,"message":"257","line":72,"column":13,"nodeType":"258","endLine":72,"endColumn":68},{"ruleId":"228","severity":1,"message":"264","line":12,"column":12,"nodeType":"230","messageId":"231","endLine":12,"endColumn":17},{"ruleId":"228","severity":1,"message":"265","line":12,"column":19,"nodeType":"230","messageId":"231","endLine":12,"endColumn":27},{"ruleId":"228","severity":1,"message":"259","line":1,"column":36,"nodeType":"230","messageId":"231","endLine":1,"endColumn":43},{"ruleId":"228","severity":1,"message":"260","line":13,"column":11,"nodeType":"230","messageId":"231","endLine":13,"endColumn":14},{"ruleId":"266","severity":1,"message":"267","line":62,"column":17,"nodeType":"230","messageId":"268","endLine":62,"endColumn":19},{"ruleId":"228","severity":1,"message":"269","line":1,"column":10,"nodeType":"230","messageId":"231","endLine":1,"endColumn":22},{"ruleId":"228","severity":1,"message":"270","line":1,"column":29,"nodeType":"230","messageId":"231","endLine":1,"endColumn":39},{"ruleId":"233","severity":1,"message":"243","line":46,"column":12,"nodeType":"235","endLine":46,"endColumn":14,"suggestions":"271"},{"ruleId":"233","severity":1,"message":"272","line":25,"column":7,"nodeType":"235","endLine":25,"endColumn":9,"suggestions":"273"},{"ruleId":"256","severity":1,"message":"257","line":34,"column":33,"nodeType":"258","endLine":34,"endColumn":76},{"ruleId":"228","severity":1,"message":"259","line":1,"column":18,"nodeType":"230","messageId":"231","endLine":1,"endColumn":25},{"ruleId":"228","severity":1,"message":"274","line":1,"column":27,"nodeType":"230","messageId":"231","endLine":1,"endColumn":31},{"ruleId":"233","severity":1,"message":"275","line":23,"column":7,"nodeType":"235","endLine":23,"endColumn":9,"suggestions":"276"},{"ruleId":"256","severity":1,"message":"257","line":32,"column":33,"nodeType":"258","endLine":32,"endColumn":76},{"ruleId":"228","severity":1,"message":"277","line":87,"column":11,"nodeType":"230","messageId":"231","endLine":87,"endColumn":18},{"ruleId":"256","severity":1,"message":"257","line":110,"column":15,"nodeType":"258","endLine":110,"endColumn":74},{"ruleId":"228","severity":1,"message":"251","line":1,"column":20,"nodeType":"230","messageId":"231","endLine":1,"endColumn":29},{"ruleId":"228","severity":1,"message":"278","line":4,"column":10,"nodeType":"230","messageId":"231","endLine":4,"endColumn":16},{"ruleId":"228","severity":1,"message":"279","line":11,"column":8,"nodeType":"230","messageId":"231","endLine":11,"endColumn":22},{"ruleId":"228","severity":1,"message":"280","line":117,"column":29,"nodeType":"230","messageId":"231","endLine":117,"endColumn":34},"no-unused-vars","'CommingSoon' is assigned a value but never used.","Identifier","unusedVar","'fromStore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'questionBank', 'quizID', 'startDate', and 'userID'. Either include them or remove the dependency array.","ArrayExpression",["281"],"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["284"],"React Hook useEffect has missing dependencies: 'quizID' and 'userID'. Either include them or remove the dependency array.",["285"],"React Hook useEffect has a missing dependency: 'quizId'. Either include it or remove the dependency array.",["286"],"React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.",["287"],"React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["288"],"'useEffect' is defined but never used.","no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Toolbar' is defined but never used.","'oes' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["289"],"'Class' is assigned a value but never used.","'setClass' is assigned a value but never used.","no-redeclare","'op' is already defined.","redeclared","'StaticRouter' is defined but never used.","'Typography' is defined but never used.",["290"],"React Hook useEffect has missing dependencies: 'Class', 'branch', 'dispatch', and 'sem'. Either include them or remove the dependency array.",["291"],"'Card' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["292"],"'userPRN' is assigned a value but never used.","'border' is defined but never used.","'FormHelperText' is defined but never used.","'queId' is assigned a value but never used.",{"desc":"293","fix":"294"},"no-global-assign","no-unsafe-negation",{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"297","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},"Update the dependencies array to be: [attempted, flagged, userChoices, dispatch, userID, quizID, startDate, questionBank]",{"range":"312","text":"313"},"Update the dependencies array to be: [history]",{"range":"314","text":"315"},"Update the dependencies array to be: [quizID, userID]",{"range":"316","text":"317"},"Update the dependencies array to be: [quizId]",{"range":"318","text":"319"},"Update the dependencies array to be: [props.peer]",{"range":"320","text":"321"},"Update the dependencies array to be: [roomID]",{"range":"322","text":"323"},"Update the dependencies array to be: [dispatch]",{"range":"324","text":"325"},{"range":"326","text":"317"},"Update the dependencies array to be: [Class, branch, dispatch, sem]",{"range":"327","text":"328"},"Update the dependencies array to be: [dispatch, user]",{"range":"329","text":"330"},[2769,2811],"[attempted, flagged, userChoices, dispatch, userID, quizID, startDate, questionBank]",[992,994],"[history]",[1127,1129],"[quizID, userID]",[649,651],"[quizId]",[567,569],"[props.peer]",[2286,2288],"[roomID]",[1126,1128],"[dispatch]",[1824,1826],[1040,1042],"[Class, branch, dispatch, sem]",[988,990],"[dispatch, user]"]