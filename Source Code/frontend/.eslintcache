[{"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\index.js":"1","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\index.js":"2","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\App.js":"3","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\quiz\\quizExtra.js":"4","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\auth\\authReducers.js":"5","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\quiz\\quiz.js":"6","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\UI\\uiReducers.js":"7","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\quiz\\quizCreator.js":"8","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\coding\\codingReducer.js":"9","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\coding\\codingSolution.js":"10","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\course\\courseReducer.js":"11","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\coding\\createCodingQuestion.js":"12","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\course\\currentCourseReducer.js":"13","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodeUI.js":"14","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\HomePage.js":"15","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizWrapper.js":"16","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizLandingPage.js":"17","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\TempLanding.js":"18","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\MalpracticeGallary.js":"19","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodingLandingPageTeacher.js":"20","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodingLandingPageStudent.js":"21","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizCreation\\QuizCreator.js":"22","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\OE\\Room.js":"23","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\OE\\CreateRoom.js":"24","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\TeacherQuizLanding.js":"25","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateStudent\\CreateStudent.js":"26","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\CreateCourse.js":"27","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateTeacher\\CreateTeacher.js":"28","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Login\\Login.js":"29","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\AdminHome.js":"30","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\AssignCourse.js":"31","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherCourse.js":"32","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Profile\\TeacherProfile.js":"33","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\practice\\practice.js":"34","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Profile\\StudentProfile.js":"35","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Student\\CourseHome.js":"36","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CreateCodingQuestion.js":"37","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\Capture.js":"38","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\blankProfile.js":"39","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Student\\StudentHome.js":"40","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherHome.js":"41","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizDownload.js":"42","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\Quiz.js":"43","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Helper\\CustomBox.js":"44","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Login\\ProfileMenu.js":"45","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\service\\userData.js":"46","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\RightPanel.js":"47","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizHeader.js":"48","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\questions\\QuestionBody.js":"49","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\QuestionIcon.js":"50","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\questions\\Option.js":"51","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodingSolutionDownload.js":"52"},{"size":1202,"mtime":1619453658080,"results":"53","hashOfConfig":"54"},{"size":1134,"mtime":1619539986471,"results":"55","hashOfConfig":"54"},{"size":4394,"mtime":1619453657919,"results":"56","hashOfConfig":"54"},{"size":641,"mtime":1619453658087,"results":"57","hashOfConfig":"54"},{"size":564,"mtime":1619453658082,"results":"58","hashOfConfig":"54"},{"size":2357,"mtime":1619453658086,"results":"59","hashOfConfig":"54"},{"size":731,"mtime":1619453658080,"results":"60","hashOfConfig":"54"},{"size":3103,"mtime":1619453658086,"results":"61","hashOfConfig":"54"},{"size":592,"mtime":1619937571789,"results":"62","hashOfConfig":"54"},{"size":2969,"mtime":1619933902792,"results":"63","hashOfConfig":"54"},{"size":232,"mtime":1619453658083,"results":"64","hashOfConfig":"54"},{"size":3323,"mtime":1619928903162,"results":"65","hashOfConfig":"54"},{"size":253,"mtime":1619453658085,"results":"66","hashOfConfig":"54"},{"size":12508,"mtime":1619940633668,"results":"67","hashOfConfig":"54"},{"size":537,"mtime":1619453657938,"results":"68","hashOfConfig":"54"},{"size":1394,"mtime":1619453658055,"results":"69","hashOfConfig":"54"},{"size":5187,"mtime":1619453658054,"results":"70","hashOfConfig":"54"},{"size":4463,"mtime":1619453658065,"results":"71","hashOfConfig":"54"},{"size":2150,"mtime":1619453658035,"results":"72","hashOfConfig":"54"},{"size":1702,"mtime":1619934924781,"results":"73","hashOfConfig":"54"},{"size":4403,"mtime":1619943853535,"results":"74","hashOfConfig":"54"},{"size":8942,"mtime":1620796275885,"results":"75","hashOfConfig":"54"},{"size":3446,"mtime":1619453657982,"results":"76","hashOfConfig":"54"},{"size":276,"mtime":1619453657969,"results":"77","hashOfConfig":"54"},{"size":1749,"mtime":1619453658064,"results":"78","hashOfConfig":"54"},{"size":8423,"mtime":1619453658028,"results":"79","hashOfConfig":"54"},{"size":6633,"mtime":1619453658028,"results":"80","hashOfConfig":"54"},{"size":5898,"mtime":1619453658029,"results":"81","hashOfConfig":"54"},{"size":5569,"mtime":1620796168059,"results":"82","hashOfConfig":"54"},{"size":1968,"mtime":1619453658027,"results":"83","hashOfConfig":"54"},{"size":5867,"mtime":1619453658027,"results":"84","hashOfConfig":"54"},{"size":5745,"mtime":1619453657945,"results":"85","hashOfConfig":"54"},{"size":2430,"mtime":1619453658026,"results":"86","hashOfConfig":"54"},{"size":8873,"mtime":1619453658030,"results":"87","hashOfConfig":"54"},{"size":2796,"mtime":1619453658015,"results":"88","hashOfConfig":"54"},{"size":2244,"mtime":1619453657939,"results":"89","hashOfConfig":"54"},{"size":13354,"mtime":1619928875974,"results":"90","hashOfConfig":"54"},{"size":1350,"mtime":1619453658031,"results":"91","hashOfConfig":"54"},{"size":23081,"mtime":1619453658071,"results":"92","hashOfConfig":"54"},{"size":2836,"mtime":1619453657943,"results":"93","hashOfConfig":"54"},{"size":2864,"mtime":1619453657953,"results":"94","hashOfConfig":"54"},{"size":1311,"mtime":1619453658052,"results":"95","hashOfConfig":"54"},{"size":6039,"mtime":1619521326386,"results":"96","hashOfConfig":"54"},{"size":318,"mtime":1619453657937,"results":"97","hashOfConfig":"54"},{"size":3751,"mtime":1619453657956,"results":"98","hashOfConfig":"54"},{"size":145,"mtime":1611810752589,"results":"99","hashOfConfig":"54"},{"size":1134,"mtime":1619453658073,"results":"100","hashOfConfig":"54"},{"size":4961,"mtime":1619940097732,"results":"101","hashOfConfig":"54"},{"size":1338,"mtime":1611939528433,"results":"102","hashOfConfig":"54"},{"size":2040,"mtime":1619453658072,"results":"103","hashOfConfig":"54"},{"size":795,"mtime":1611939745623,"results":"104","hashOfConfig":"54"},{"size":1149,"mtime":1619934861295,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"f9pvug",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"108"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"108"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"108"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"108"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"108"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"108"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"108"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"108"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"108"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"108"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"108"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\index.js",[],["236","237"],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\index.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\App.js",["238"],"import {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport QuizWrapper from \"./components/quiz/QuizWrapper\";\r\nimport HomePage from './components/Home/HomePage'\r\nimport CodeUI from './components/Coding/CodeUI';\r\nimport CreateCodingQuestion from './components/Coding/CreateCodingQuestion';\r\nimport Creator from './components/quiz/QuizCreation/QuizCreator'\r\nimport CreateRoom from './components/OE/CreateRoom'\r\nimport Room from \"./components/OE/Room\";\r\nimport AdminHome from \"./components/admin/AdminHome\"\r\nimport CreateStudent from './components/admin/CreateStudent/CreateStudent'\r\nimport CreateTeacher from './components/admin/CreateTeacher/CreateTeacher'\r\nimport CreateCourse from './components/admin/CreateCourse/CreateCourse'\r\nimport AssignCourse from './components/admin/CreateCourse/AssignCourse'\r\nimport Login from './components/Login/Login'\r\nimport CourseHome from './components/Home/Student/CourseHome'\r\nimport TeacherCourseHome from './components/Home/Teacher/TeacherCourse'\r\nimport QuizLandingPage from './components/quiz/QuizLandingPage';\r\nimport TempLanding from './components/quiz/TempLanding';\r\nimport TeacherQuizLanding from './components/quiz/TeacherQuizLanding';\r\nimport StudentProfile from './components/Profile/StudentProfile';\r\nimport TeacherProfile from './components/Profile/TeacherProfile';\r\nimport { Alert } from '@material-ui/lab';\r\nimport MalpracticeGallary from './components/quiz/MalpracticeGallary';\r\nimport CodingLandingPageStudent from './components/Coding/CodingLandingPageStudent';\r\nimport CodingLandingPageTeacher from './components/Coding/CodingLandingPageTeacher';\r\n\r\nimport Practice from './components/practice/practice';\r\nfunction App() {\r\n\treturn(\r\n\t\t<Router>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Login} />\r\n                <Route path=\"/home\" exact component={HomePage} />\r\n\r\n                {/* QUIZ */}\r\n                <Route path=\"/course/quiz/:quizID\" exact component={QuizLandingPage} />\r\n                <Route path=\"/course/quiz/:quizID/:userID\" exact component={TempLanding} />\r\n                <Route path=\"/quiz/:quizID/:userID\" exact component={QuizWrapper} />\r\n                <Route path=\"/teacher/quiz/:quizID\" exact component={TeacherQuizLanding} />\r\n                <Route path=\"/teacher/quiz/malpractices/:quizID/:userID\" exact component={MalpracticeGallary} />\r\n\r\n                {/* Student */}\r\n                <Route path=\"/student/profile\" exact component={StudentProfile}/>\r\n                <Route path=\"/course/:courseName\" exact component={CourseHome} />\r\n                <Route path=\"/student/poe/:codeID\" exact component={CodingLandingPageStudent} />\r\n                <Route path=\"/student/poe/:codeID/:userID\" exact component={CodeUI} />\r\n\r\n                {/* Video Calling */}\r\n                <Route path=\"/OE\" exact component={CreateRoom}/>\r\n                <Route path=\"/room/:roomID\" component={Room}/>\r\n\r\n                {/* Create POE */}\r\n                <Route path=\"/teacher/createPOE/:courseID\" exact component={CreateCodingQuestion} />\r\n                <Route path=\"/code\" exact component={CodeUI} />\r\n                <Route path=\"/test\" exact component={Practice} />\r\n\r\n                {/* Admin */}\r\n                <Route path=\"/admin\" exact component={AdminHome} />\r\n                <Route path=\"/createStudent\" exact component={CreateStudent} />\r\n                <Route path=\"/createTeacher\" exact component={CreateTeacher} />\r\n                <Route path=\"/createCourse\" exact component={CreateCourse} />\r\n                <Route path=\"/assignCourse\" exact component={AssignCourse} />\r\n\r\n                {/* Teacher */}\r\n                <Route path=\"/teacher/profile\" exact component={TeacherProfile}/>\r\n                <Route path=\"/course/teacher/:courseName\" exact component={TeacherCourseHome} />\r\n                <Route path=\"/teacher/createQuiz/:courseID\" exact component={Creator} />\r\n                <Route path=\"/teacher/poe/:codeID\" exact component={CodingLandingPageTeacher} />\r\n            </Switch>\r\n        </Router>\r\n\t);\r\n}\r\n\r\nconst CommingSoon = () => {\r\n    return(\r\n        <div className=\"ch-container\">\r\n    <Alert style={{\r\n        position: 'absolute', left: '50%', top: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }} severity=\"error\" > 404 Not Found </Alert>\r\n  </div>\r\n            \r\n    );\r\n}\r\nexport default App;\r\n","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\quiz\\quizExtra.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\auth\\authReducers.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\quiz\\quiz.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\UI\\uiReducers.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\quiz\\quizCreator.js",["239"],"const initialState = {\r\n    courseID: \"\",\r\n    subject: null,\r\n    proctored: false,\r\n    startDate: null,\r\n    endDate: null,\r\n    duration: null,\r\n    threshold: null,\r\n    questions: []\r\n}\r\n\r\nvar questionState = {\r\n    qNo: null,\r\n    qType: 1,\r\n    question: \"\",\r\n    options: []\r\n}\r\n\r\nconst optionsState = {\r\n    qs: \"\",\r\n    ans: false\r\n};\r\n\r\n\r\n\r\nvar QIndex, OIndex, QArray;\r\n\r\nconst quizCreatorReducer = (state= initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"SET_QUIZCOURSE\":\r\n            return {...state, courseID: action.payload}\r\n\r\n        case \"ADD_QUESTION_TEMPLATE\":\r\n            QArray = [...state.questions];\r\n            const newQuestionState = {...questionState, qNo: QArray.length+1 }\r\n            QArray.push(newQuestionState)\r\n            return {...state, questions: QArray}\r\n\r\n        case 'ADD_QUESTION':\r\n            QArray = [...state.questions];\r\n            QIndex = action.payload.QIndex;\r\n            QArray[QIndex].question = action.payload.question;\r\n            return {...state, questions: QArray}\r\n\r\n        case \"ADD_OPTION_TEMPLATE\":\r\n            QArray = [...state.questions];\r\n            var op = QArray[action.payload.QIndex]\r\n            console.log(\"REDUCER\", op.options.length)\r\n            if(op.options.length === 0)\r\n                op.options = [...op.options, {qs: \"\",ans: true}]\r\n            else\r\n                op.options = [...op.options, {qs: \"\",ans: false}]\r\n            return {...state, questions: QArray}\r\n\r\n        case 'ADD_OPTION':\r\n            QArray = [...state.questions];\r\n            QIndex = action.payload.QIndex;\r\n            OIndex = action.payload.OIndex;\r\n            QArray[QIndex].options[OIndex] = {...optionsState, qs: action.payload.option}\r\n            return {...state, questions: QArray}\r\n        \r\n        case 'SET_ANSWER':\r\n            QArray = [...state.questions];\r\n            QIndex = action.payload.QIndex;\r\n            OIndex = action.payload.OIndex;\r\n            var op = QArray[QIndex]\r\n            \r\n            if(op.options[OIndex].ans){\r\n                \r\n                QArray[QIndex].options[OIndex].ans = false;\r\n                return {...state, questions: QArray}\r\n            }\r\n            op.options.forEach(O => {\r\n                if(O.ans){\r\n                    O.ans = false;\r\n                }\r\n            });\r\n            \r\n            QArray[QIndex].options[OIndex] = {...op.options[OIndex], ans: true}\r\n            return {...state, questions: QArray}\r\n        \r\n        case \"SET_QUIZ_SUBJECT\":\r\n            return {...state, subject: action.payload}\r\n        case \"SET_STARTDATE\":\r\n            return {...state, startDate: action.payload}\r\n        case \"SET_ENDDATE\":\r\n            return {...state, endDate: action.payload}\r\n        case \"SET_DURATION\":\r\n            return {...state, duration: action.payload}\r\n        case \"SET_THRESHOLD\":\r\n            return {...state, threshold: action.payload}\r\n        case \"RESET_QUIZCREATION\":\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default quizCreatorReducer;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\coding\\codingReducer.js",["240"],"const initialState = {\r\n    courseID: \"\",\r\n    title: null,\r\n    threshold: 0,\r\n    startDate: null,\r\n    endDate: null,\r\n    duration: null,\r\n    problems: []\r\n}\r\n\r\nvar problemState = {\r\n    title: \"\",\r\n    statement: \"\",\r\n    testcases: [],\r\n    languages: {\r\n        c: true,\r\n        cpp: true,\r\n        java: true,\r\n        python: true\r\n    }\r\n}\r\n\r\nconst codingReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_CODING\":\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default codingReducer;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\coding\\codingSolution.js",["241","242"],"const initialState = {\r\n    solution: [\"\"],\r\n    correctTestcases: 0,\r\n    totalTestcases: 0,\r\n    language: \"Python3\",\r\n    startedAt: Date.now(),\r\n    warnings: 0,\r\n    startedAt: Date.now(),\r\n    warnings: 0\r\n}\r\nconst codingSolutionReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SOLUTION\":\r\n            const problemNo = action.payload.pNO;\r\n            const temp_Solution = state.solution;\r\n            \r\n            if(problemNo === 0)\r\n                temp_Solution[0] = action.payload.code;\r\n\r\n            else if(temp_Solution.length === (problemNo))\r\n                temp_Solution.push(action.payload.code);\r\n\r\n            else{\r\n                for (let index = 0; index < temp_Solution.length - 1; index++)\r\n                    temp_Solution.push(\"\");\r\n                temp_Solution[problemNo] = action.payload.code;\r\n            }\r\n            return {...state, solution: temp_Solution};\r\n        case \"SET_TOTALTESTCASE\":\r\n            return {...state, totalTestcases: action.payload};\r\n        case \"SET_CORRECTTESTCASE\":\r\n            return {...state, correctTestcases: action.payload};\r\n        case \"SET_SOLUTION_LANGUAGE\":\r\n            return {...state, language: action.payload};\r\n        case \"SET_STARTEDAT\":\r\n            return {...state, startedAt: action.payload};\r\n        case \"LOAD_CODESOLUTION\":\r\n            return action.payload;\r\n        case \"RESET_CODESOLUTION\":\r\n            return initialState;\r\n        case \"INCREMENT_CODEWARNING\":\r\n            const temp = state.warnings + 1;\r\n            return {...state, warnings: temp}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const saveCodeSolution = () => async (dispatch, getState) => {\r\n    \r\n    // Get Data \r\n    const userID = getState().auth.user.id;\r\n    const codeID = getState().coding._id;\r\n    const temp = getState().codeSolution;\r\n    const solution = {...temp, userID,codeID};\r\n    await fetch(\"/code/saveUserCode\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(solution)\r\n    });\r\n\r\n\r\n}\r\n\r\nexport const submitCodeSolution = () => async (dispatch, getState) => {\r\n    \r\n    // Get Data \r\n    const userID = getState().auth.user.id;\r\n    const codeID = getState().coding._id;\r\n    // const courseID = getState().coding.courseID;\r\n    const finishedAt = Date().toString();\r\n    const temp = getState().codeSolution;\r\n    const solution = {...temp, userID,codeID, finishedAt};\r\n\r\n    await fetch(\"/code/submitCodeSolution\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(solution)\r\n    }).then((resData) =>{\r\n        document.exitFullscreen();\r\n        window.location.replace(\"/home\");\r\n    })\r\n\r\n\r\n}\r\n\r\nexport default codingSolutionReducer;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\course\\courseReducer.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\coding\\createCodingQuestion.js",["243"],"const initialState = {\r\n    courseID: \"\",\r\n    title: null,\r\n    threshold: 0,\r\n    startDate: null,\r\n    endDate: null,\r\n    duration: null,\r\n    problems: []\r\n}\r\n\r\nvar problemState = {\r\n    title: \"\",\r\n    statement: \"\",\r\n    testcases: [],\r\n    languages: {\r\n        C: true,\r\n        Cpp: true,\r\n        Java: true,\r\n        Python3: true\r\n    }\r\n}\r\n\r\nconst testState = {\r\n    input: \"\",\r\n    output: \"\"\r\n}\r\n\r\nvar PIndex, TIndex, PArray;\r\n\r\nconst createCodingReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"SET_CODING_COURSE\":\r\n            return { ...state, courseID: action.payload }\r\n\r\n        case \"ADD_PROBLEM_TEMPLATE\":\r\n            PArray = [...state.problems];\r\n            const newProblemState = { ...problemState }\r\n            PArray.push(newProblemState)\r\n            return { ...state, problems: PArray }\r\n\r\n        \r\n        case \"ADD_PROBLEM_TITLE\":\r\n            PArray = [...state.problems];\r\n            PIndex = action.payload.PIndex;\r\n            PArray[PIndex].title = action.payload.title;\r\n            return { ...state, problems: PArray }\r\n\r\n        case 'ADD_STATEMENT':\r\n            PArray = [...state.problems];\r\n            PIndex = action.payload.PIndex;\r\n            PArray[PIndex].statement = action.payload.statement;\r\n            return { ...state, problems: PArray }\r\n\r\n        case \"SET_PROBLEM_LANGUAGES\":\r\n            PArray = [...state.problems];\r\n            PIndex = action.payload.PIndex;\r\n            var key = action.payload.lang;\r\n            PArray[PIndex].languages[key] = action.payload.flag;\r\n            return { ...state, problems: PArray }\r\n\r\n        case \"ADD_TESTCASE_TEMPLATE\":\r\n            PArray = [...state.problems];\r\n            var test = PArray[action.payload.PIndex]\r\n            test.testcases = [...test.testcases, { input: \"\", output: \"\" }]\r\n            return { ...state, problems: PArray }\r\n\r\n        case 'ADD_TESTCASE_INPUT':\r\n            PArray = [...state.problems];\r\n            PIndex = action.payload.PIndex;\r\n            TIndex = action.payload.TIndex;\r\n            // PArray[PIndex].testcases[TIndex] = { ...testState, input: action.payload.input }\r\n            PArray[PIndex].testcases[TIndex].input = action.payload.input;\r\n            return { ...state, problems: PArray }\r\n\r\n        case 'ADD_TESTCASE_OUTPUT':\r\n            PArray = [...state.problems];\r\n            PIndex = action.payload.PIndex;\r\n            TIndex = action.payload.TIndex;\r\n            // PArray[PIndex].testcases[TIndex] = { ...testState, output: action.payload.output }\r\n            PArray[PIndex].testcases[TIndex].output = action.payload.output;\r\n            return { ...state, problems: PArray }\r\n\r\n        case \"SET_ASSIGNMENT_TITLE\":\r\n            return { ...state, title: action.payload }\r\n        case \"SET_CODETHRESHOLD\":\r\n            return { ...state, threshold: action.payload }\r\n        case \"SET_STARTDATE\":\r\n            return { ...state, startDate: action.payload }\r\n        case \"SET_ENDDATE\":\r\n            return { ...state, endDate: action.payload }\r\n        case \"SET_DURATION\":\r\n            return { ...state, duration: action.payload }\r\n        case \"RESET_CODING_CREATION\":\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default createCodingReducer;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\reducer\\course\\currentCourseReducer.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodeUI.js",["244","245","246","247","248","249","250","251","252"],"import {useState, React, useEffect} from 'react';\r\nimport {Typography, Grid, CircularProgress, AppBar, Modal, makeStyles, Divider } from '@material-ui/core';\r\nimport Editor from \"@monaco-editor/react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Run from '@material-ui/icons/PlayArrowRounded';\r\nimport Submit from '@material-ui/icons/PublishRounded';\r\nimport Note from '@material-ui/icons/NotesRounded';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Capture from '../quiz/Capture';\r\nimport blankProfile from '../quiz/blankProfile';\r\nimport * as faceapi from 'face-api.js';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport Countdown from 'react-countdown';\r\nimport {saveCodeSolution,submitCodeSolution} from '../../reducer/coding/codingSolution';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tdisplay: 'block',\r\n\t\tmarginTop: '5vw',\r\n\t\tmargin: 'auto',\r\n\t\twidth: '55%',\r\n\t\tbackgroundColor: '#182835',\r\n\t\tborder: '2px solid #000',\r\n\t\tboxShadow: '0px 3px 1px #fec14e',\r\n\t\tpadding: theme.spacing(2, 4, 3),\r\n\t\tcolor: '#fec14e',\r\n\t\tborder: '3px solid white',\r\n\t\tborderRadius: '5pt',\r\n\t\tmaxHeight: '500px',\r\n\t\toverflowY: 'auto',\r\n\t},\r\n\t\r\nuserIcon:{\r\n\twidth: theme.spacing(12),\r\n\theight: theme.spacing(12),\r\n\tmarginTop: theme.spacing(2),\r\n\tborderRadius: '3rem'\r\n  }\r\n}));\r\n\r\n\r\nvar remaining = 0;\r\nconst CodeUI = () => {\r\n    const codeAssignmentQuestions = useSelector(state => state.coding);\r\n\tconst codeSolution = useSelector(state => state.codeSolution);\r\n\tremaining = codeAssignmentQuestions.threshold - codeSolution.warnings;\r\n    const [Code, setCode] = useState(codeSolution.solution[0]);\r\n    const [language, setLanguage] = useState(codeSolution.language);\r\n    const [Output, setOutput] = useState(\"Type and Click on Run \\n1. Choose your language from DropDown\\n2. For Java Use Class Name as Solution\");\r\n    const [isLoading, setLoading] = useState(false);\r\n\tconst [testcaseCount, setTestCaseCount] = useState(0);\r\n\tconst [failedCases, setFailedCases] = useState(\"\");\r\n\tconst endDate = codeSolution.startedAt + parseInt(codeAssignmentQuestions.duration)*60000;\r\n\tvar gTC = 0;\r\n\tvar inQueueCount = 0;\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(()=>{\r\n\t\tdocument.documentElement.requestFullscreen().catch((e) => {console.log(e)})\r\n\t},[])\r\n\r\n\tconst handleCode = (e) => {\r\n\t\tdispatch({type: \"SET_SOLUTION\", payload: {pNO: currentQ, code: e}});\r\n\t\tsetCode(e);\r\n\t}\r\n\t// Use this for Changing Question Number later\r\n\tconst totalQuestions = codeAssignmentQuestions.problems.length;\r\n\tconst [currentQ,setCurrentQ] = useState(0);\r\n\r\n    function fetchResult(sid,i,tIn) {\r\n\t\tconsole.log(\"Index\", i);\r\n\t\tsetOutput(\"\");\r\n        fetch(\"/code/fetchResult\",\r\n            {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({sid})\r\n            }\r\n        ).then(\r\n            (res) => res.json().then(resData => {\r\n                if (resData.status === 'IN-QUEUE') {\r\n\t\t\t\t\tinQueueCount += 1;\r\n\t\t\t\t\tif(inQueueCount < 20)\r\n                    \treturn fetchResult(sid,i,tIn);\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tsetOutput(\"Error: Time Out\");\r\n\t\t\t\t\t}\r\n                }\r\n                else if(resData.rntError){\r\n\t\t\t\t\tsetOutput(resData.rntError);\r\n\t\t\t\t}\r\n                else if(resData.cmpError){\r\n\t\t\t\t\tsetOutput(resData.cmpError);\r\n\t\t\t\t}else{\r\n                // setOutput(resData.output);\r\n\t\t\t\tif(codeAssignmentQuestions.problems[0].testcases[i].output === resData.output){\r\n\t\t\t\t\tgTC += 1;\r\n\t\t\t\t\tif(i===0)\r\n\t\t\t\t\t\tsetOutput(`Case Passed\\nYour Output: ${resData.output}`);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsetOutput(Output + `\\nCase Passed\\nYour Output: ${resData.output}` + `\\n ${gTC} / ${codeSolution.totalTestcases} Cases Passed`);\r\n\t\t\t\t\tsetTestCaseCount(testcaseCount+1);\r\n\t\t\t\t\tdispatch({type: \"SET_CORRECTTESTCASE\", payload:gTC});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tsetOutput(Output + \"\\nTest Case Failed\\nYour Output: \"+ JSON.stringify({Output: resData.output}) + \" for input: \"+ codeAssignmentQuestions.problems[0].testcases[i].input);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n                setLoading(false);\r\n                return;\r\n            })\r\n        ).catch(err => console.log(err)).catch(err => { setLoading(false); setOutput(\"Server Error\"); console.log(err)});\r\n    }\r\n    function SubmitForm(e) {\r\n\t\tsetTestCaseCount(0);\r\n        setLoading(true);\r\n\t\tsetOutput(\"\");\r\n        e.preventDefault();\r\n\t\tgTC = 0;\r\n\t\tinQueueCount = 0;\r\n        for (let index = 0; index < codeSolution.totalTestcases; index++) {\r\n\t\t\tfetch(\"/code/compile\",\r\n            {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    lang: language,\r\n                    code: Code,\r\n                    input: codeAssignmentQuestions.problems[0].testcases[index].input,\r\n                    save: false\r\n                })\r\n            }\r\n        ).then(\r\n            (res) => res.json().then(resData => {fetchResult(resData.sid,index,gTC,codeAssignmentQuestions.problems[0].testcases[index].input)})\r\n        ).catch(err => console.log(err)).catch(err => console.log(err));\r\n\t\t\t\r\n\t\t}\r\n    }\r\n\r\n\t\r\n\r\n\tconst classes = useStyles();\r\n\tconst [open, setOpen] = useState(false);\r\n  \r\n\tconst handleOpen = () => {\r\n\t  setOpen(true);\r\n\t};\r\n  \r\n\tconst handleClose = () => {\r\n\t  setOpen(false);\r\n\t};\r\n\r\n\t// {/* Problem statement Stored here*/}\r\n\t// const pStitle = \"Problem Statement Title\"\r\n\t// const pSdesc = \"This is the problem statement description\\n*This text is just a placeholher\";\r\n\r\n\tconst body = (\r\n\t\t<div className={classes.paper}>\r\n\t\t\t<h2 id=\"title\"><Note fontSize='medium'/>\r\n\t\t\t\t{codeAssignmentQuestions.title}\r\n\t\t\t</h2>\r\n\t\t\t<hr/><br/>\r\n\r\n\t\t\t<textarea className='PSBody' readOnly>\r\n\t\t\t{/* Problem statement description*/}\r\n\t\t\t{codeAssignmentQuestions.problems[0].statement + \"\\nSample Input: \\n\" + codeAssignmentQuestions.problems[0].testcases[0].input + \"\\nOutput: \" + codeAssignmentQuestions.problems[0].testcases[0].output}\r\n\t\t\t</textarea>\r\n\t\t</div>\r\n\t);\r\n\tuseEffect(()=>{\r\n\t\tdispatch(saveCodeSolution());\r\n\t},[Code,language,Output,language,dispatch])\r\n\tconst submitCode = () => {\r\n\t\tif (window.confirm('Confirm Submission'))\r\n\t\t\tdispatch(submitCodeSolution());\r\n\t\telse{\r\n\t\t\tdocument.documentElement.requestFullscreen().catch((e) => {console.log(e); window.history.go(-1)})\r\n\t\t}\r\n\t}\r\n\r\n\tconst renderer = ({ hours, minutes, seconds, completed }) => {\r\n\t\tif (completed) {\r\n\t\t  return <>Completed</>;\r\n\t\t} else {\r\n\t\t  // Render a countdown\r\n\t\t  return <span>{hours}:{minutes}:{seconds}</span>;\r\n\t\t}\r\n\t  };\r\n    \r\n    return (\r\n        <div className='ch-container' style={{height:'auto'}}>\r\n            <div style={{padding:'5px'}}>\r\n\t\t\t\t<AppBar position='static' className='Appbar'>\r\n\t\t\t\t\t<Grid container style={{justifyContent:'space-between',position:'relative'}}>\r\n\t\t\t\t\t\t<Grid item style={{display:'flex',justifyContent:'space-between'}}>\r\n\t\t\t\t\t\t\t<img src='/logo_trans.png' className='code-logo' alt=\"Logo\"/>\r\n\t\t\t\t\t\t\t<div style={{display:'inline-block',verticalAlign:'middle',textAlign:'center',color:'#fec14e'}}>\r\n\t\t\t\t\t\t\t\t<h1 style={{position:'relative',top:'50%',transform: 'translateY(-50%)'}}>Proctor</h1>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item style={{display:'flex',justifyContent:'space-between'}}>\r\n\t\t\t\t\t\t\t<div style={{display:'block',color:'#fec14e'}}>\r\n\t\t\t\t\t\t\t\t\t<h3 style={{position:'relative',top:'50%',transform: 'translateY(-50%)',marginRight:'5px'}}>\r\n\t\t\t\t\t\t\t\t\t\tWarnings : {codeSolution.warnings + ` Remaining: ${remaining} `} \r\n\t\t\t\t\t\t\t\t\t\t<Countdown date={endDate} onComplete={()=> {dispatch(submitCodeSolution())}} />\r\n\t\t\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<CodeCapture />\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Divider variant='inset'/>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div className='options-btns'>\r\n\t\t\t\t\t\t\t<div className='buttonWrap'>\r\n\t\t\t\t\t\t\t\t<Button onClick={handleOpen}><Note fontSize='small' color='white'/> Problem Statement </Button>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div style={{textAlign:'center'}}>\r\n\t\t\t\t\t\t\t\t<h5>Language</h5>\r\n\t\t\t\t\t\t\t\t<select style={{minWidth:'70px'}}\r\n\t\t\t\t\t\t\t\t\t\tvalue={language}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e)=>{setLanguage(e.target.value)}}\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Language\">\r\n\t\t\t\t\t\t\t\t\t<option value={\"C\"}>C</option>\r\n\t\t\t\t\t\t\t\t\t<option value={\"Cpp\"}>C++</option>\r\n\t\t\t\t\t\t\t\t\t<option value={\"Java\"}>Java</option>\r\n\t\t\t\t\t\t\t\t\t<option value={\"Python3\"}>Python</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className='buttonWrap'>\r\n\t\t\t\t\t\t\t\t{isLoading? <CircularProgress />:<Button type=\"submit\" form='code' color=\"primary\"><Run/>Run</Button>}\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className='buttonWrap'>\r\n\t\t\t\t\t\t\t\t<Button onClick={submitCode} form='code' color=\"primary\"><Submit/>Submit</Button>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<Modal\r\n\t\t\t\t\t\t\t\topen={open}\r\n\t\t\t\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\t\t\t\taria-labelledby=\"simple-modal-title\"\r\n\t\t\t\t\t\t\t\taria-describedby=\"simple-modal-description\">\r\n\t\t\t\t\t\t\t\t{body}\r\n\t\t\t\t\t\t\t</Modal>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</AppBar >\r\n\t\t\t</div>\r\n            \r\n\t\t\t<div style={{padding:'5px',display:'flex',textAlign:'center'}}>\r\n\t\t\t\t<div style={{height:'100%',flex:'1 0 60%'}}>\r\n\t\t\t\t\t<Typography variant='h5'style={{color:'#fec14e'}}> Code </Typography>\r\n\t\t\t\t\t<form id='code' onSubmit={SubmitForm}>\r\n\t\t\t\t\t\t<Editor\r\n\t\t\t\t\t\t\tvalue = {Code}\r\n\t\t\t\t\t\t\tonChange ={handleCode}\r\n\t\t\t\t\t\t\theight='75vh'\r\n\t\t\t\t\t\t\ttheme='vs-dark'\r\n\t\t\t\t\t\t\tdefaultLanguage=\"java\"\r\n\t\t\t\t\t\t\tfontSize = '30px'\r\n\t\t\t\t\t\t\tmargin = 'auto'\r\n\t\t\t\t\t\t\toptions = {{\"fontSize\": \"19\",\"autoIndent\":\"advanced\",\"fontFamily\":\"dank mono\"}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div style={{height:'100%',flex:'1 1 40%',display:'flex',flexDirection:'column'}}>\r\n\t\t\t\t\t<Typography variant='h5' style={{color:'#00ff00'}}> Output </Typography>\r\n\t\t\t\t\t<div style={{display:'block',height:'max',flex:'1 0 100%'}}>\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tonChange={(e) => setOutput(e.target.value)}\r\n\t\t\t\t\t\tvalue={Output}\r\n\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\tclassName = 'terminal-textArea'\r\n\t\t\t\t\t\tstyle = {{height:'530px', width:'100%',boxSizing:'border-box',flex:'1 1 100%'}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CodeCapture = () => {\r\n\tconst classes = useStyles();\r\n\tconst [imgSrc, setImgSrc] = useState(blankProfile);\r\n\tconst userID = useSelector(state => state.auth.user.id);\r\n\tconst quizID = useSelector(state => state.coding._id);\r\n\tconst dispatch = useDispatch();\r\n\tconst [Proctor, setProctor] = useState(false);\r\n\r\n\tfunction saveLog(img){\r\n\t\tconst reqBody = {\r\n\t\t  image: img,\r\n\t\t  userID,\r\n\t\t  quizID\r\n\t\t}\r\n  \r\n\t\tfetch('/quiz/malpracticeLog', {\r\n\t\t  method: \"POST\",\r\n\t\t  headers: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t  },\r\n\t\t  body: JSON.stringify(reqBody)\r\n\t\t}).then( data => {\r\n\t\t  console.log(\"Malpractice uploaded\");\r\n\t\t}).catch(err => {\r\n\t\t  console.error(err);\r\n\t\t})\r\n  \r\n\t  }\r\n\r\n\r\n\tfunction warn(message){\r\n\t\tconfirmAlert({\r\n\t\t  title: 'Warning',\r\n\t\t  message: message,\r\n\t\t  buttons: [\r\n\t\t\t{\r\n\t\t\t  label: 'OK',\r\n\t\t\t  onClick: () => document.documentElement.requestFullscreen().catch((e) => {console.log(e); window.history.go(-1)})\r\n\t\t\t}\r\n\t\t  ]\r\n\t\t});\r\n\t  };\r\n\tconst faceProcessingFunction = (faceData,img) => {\r\n\t\tif(faceData.length === 0){\r\n\t\t  warn(\"No Face Detected\")\r\n\t\t  dispatch({type:\"INCREMENT_CODEWARNING\"});\r\n\t\t  dispatch(saveCodeSolution());\r\n\t\t  saveLog(img);\r\n\t\t  if(remaining < 1){\r\n\t\t\tdispatch(submitCodeSolution());\r\n\t\t  }\r\n\t\t}\r\n\t\telse if(faceData.length > 1){\r\n\t\t  warn(\"Multiple Face Detected\");\r\n\t\t  dispatch({type:\"INCREMENT_CODEWARNING\"});\r\n\t\t  saveLog(img);\r\n\t\t  if(remaining < 1){\r\n\t\t\tdispatch(submitCodeSolution());\r\n\t\t  }\r\n\t\t}\r\n\t  }\r\n\r\n\t  const updateImgSrc = (img) => {\r\n\t\tsetImgSrc(img);\r\n\t\tfaceapi.detectAllFaces(\"codeImg\", new faceapi.TinyFaceDetectorOptions()).then((data) => faceProcessingFunction(data,img)).catch((err)=> console.error(err))\r\n\t  }\r\n\r\n\tuseEffect(()=>{\r\n\t\tPromise.all([\r\n\t\t\tfaceapi.nets.tinyFaceDetector.loadFromUri('/models'),\r\n\t\t\tfaceapi.nets.faceLandmark68Net.loadFromUri('/models'),\r\n\t\t\tfaceapi.nets.faceRecognitionNet.loadFromUri('/models'),\r\n\t\t]).then(()=> {\r\n\t\t\tsetProctor(true);\r\n\t\t\tconsole.log(\r\n\t\t\t\"Face API Started\"\r\n\t\t  )}).catch((err) => console.log(\"Error Starting FACE API\", err.message));\r\n\t},[])\r\n\tif(Proctor)\r\n\t\treturn(\r\n\t\t\t<>\r\n\t\t\t\t<Capture setImgSrc={updateImgSrc}/>\r\n\t\t\t\t<img id=\"codeImg\" src={imgSrc} className={classes.userIcon}/>\r\n\t\t\t</>\r\n\r\n\t\t);\r\n\telse\r\n\t\treturn(<></>)\r\n}\r\n\r\n\r\nexport default CodeUI;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\HomePage.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizWrapper.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizLandingPage.js",["253"],"import { Box, Button, Grid, AppBar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\n\r\nconst QuizLandingPage = (props) => {\r\n    const quizID = props.match.params.quizID;\r\n    //console.log(quizID)\r\n    const [quizData,setQuizData] = useState({})\r\n    const [isAvailable, setAvailable] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const quizState = useSelector(state => state.quiz);\r\n    const fromStore = quizState.userChoices;\r\n    const userID = useSelector(state => state.auth.user.id);\r\n    const [status, setStatus] = useState(true);\r\n    const history = useHistory();\r\n\r\n    useEffect(\r\n        () => {\r\n            dispatch({type: \"RESET_QUIZEXTRA\"})\r\n            fetch(`/quiz/getQuiz/${quizID}`).then(\r\n                data => data.json().then(newData => {\r\n                    //console.log(JSON.stringify(newData));\r\n                    setQuizData(newData);\r\n                    const endDate = new Date(newData.endDate).getTime();\r\n                    const startDate = new Date(newData.startDate).getTime();\r\n                    console.log();\r\n                    if(startDate > Date.now() || endDate < Date.now())\r\n                    {\r\n                        setAvailable(false);\r\n                    }else{\r\n                        setAvailable(true);\r\n                    }\r\n                })\r\n            );\r\n            \r\n            fetch('/quiz/quizStatusCheck',{\r\n                method: \"POST\",\r\n                mode: 'cors',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({qID: quizID, userID})\r\n             }).then(data => data.json().then(newData => {\r\n                 setStatus(newData.status);\r\n             })).catch(err => console.log(err))\r\n        }, []\r\n        );\r\n    const takeQuiz = () => {\r\n        // Save Current Quiz Data to Store\r\n        dispatch({type:\"SET_QUIZDATA\", payload: quizData});\r\n\r\n        // Check if UserData StartTime Exists\r\n        // If store does not have any saved Instances of userChoices\r\n        if(!fromStore){\r\n\r\n            //Check from Database\r\n            console.log(\"database Check\")\r\n            fetch(`/quiz/userChoices/${userID}/${quizID}`).then(data=>{\r\n                data.json().then(newData => {\r\n                    // No Saved Instance on Database\r\n                    // New Attempt starts\r\n                    if(newData.msg){\r\n\r\n                        const newUserChoices = {\r\n                                userID: userID,\r\n                                quizID: quizID,\r\n\t\t\t                    attempted: [],\r\n    \t\t                    flagged: [],\r\n                                userChoices: {},\r\n                                startedAt: null,\r\n                                questions: quizData,\r\n                                warnings: 0,\r\n                        }\r\n                        dispatch({type: \"SAVE_USERCHOICES\", payload: newUserChoices})\r\n                        history.push(`${quizID}/${userID}`);\r\n\r\n\r\n                    }\r\n                    // Saved Instance on Database\r\n                    else{\r\n                        \r\n                        console.log(JSON.stringify(newData));\r\n                        const questions = newData.questions[0];\r\n                        newData = {...newData, questions: questions};\r\n                        // Set Start Date from Database\r\n                        dispatch({type: \"SAVE_USERCHOICES\", payload: newData})\r\n                        history.push(`${quizID}/${userID}`);\r\n                        \r\n                        \r\n\r\n                    }\r\n                })\r\n            });\r\n        }else{\r\n            console.log(\"From Store\");\r\n            console.log(JSON.stringify(quizState));\r\n            history.push(`${quizID}/${userID}`);\r\n        }\r\n    }\r\n    return(\r\n        <div className='ch-container'>\r\n        <div style={{padding:'5px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            Proctored Quiz\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n        </div>\r\n    <Grid className='cor' style={{margin:'0'}} container >\r\n            <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\r\n                <Box p={2} boxShadow={5} borderBottom={1}>\r\n                    {quizData.subject}\r\n                </Box>\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\r\n                {\r\n                  status || !isAvailable ?<Alert severity='warning'> Quiz Not Available </Alert>\r\n                  :<Button variant='contained' color='primary' onClick={takeQuiz}>Take Quiz</Button>\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n  </div>\r\n        \r\n    );\r\n}\r\n\r\n\r\nexport default QuizLandingPage;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\TempLanding.js",["254"],"import {useHistory } from \"react-router-dom\";\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport {Button, CardContent, Card, Typography, Grid} from '@material-ui/core';\r\nimport Webcam from \"react-webcam\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst TempLanding = (props) => {    \r\n    const quizData = useSelector(state => state.quiz.questions)\r\n    const webCamRef = useRef(null);\r\n    const videoConstraints = {facingMode: 'user'};\r\n    const [camActive, setCamActive] = useState(false);\r\n    const history = useHistory();\r\n    const quizPage = `/quiz/${props.match.params.quizID}/${props.match.params.userID}`;\r\n\r\n    useEffect(()=>{\r\n        navigator.mediaDevices.getUserMedia({video: true}).then(\r\n            (stream) => {\r\n                setCamActive(true);\r\n                stream.oninactive = () => {history.go(0)}\r\n                stream.onremovetrack = () => {history.go(0)}\r\n            }\r\n        ).catch((err)=> console.log(err));\r\n    },[]);\r\n    return(\r\n        \r\n\r\n        <>\r\n        <Grid container spacing={2}>\r\n\r\n                <Grid item xs={6} style={{marginTop:100}}>\r\n                    <Card style={{marginLeft:150,marginRight:100,background:'#1e88e5'}}>\r\n                        <CardContent style={{marginTop:15,color:'white'}}>\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:800}}>\r\n                            Subject :\r\n                        </Typography>\r\n\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:500,marginLeft:10}}>\r\n                            {quizData.subject}\r\n                        </Typography>\r\n                        <br/>\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:800}}>\r\n                            Time :\r\n                        </Typography>\r\n\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:500,marginLeft:10}}>\r\n                            {quizData.duration} Minutes\r\n                        </Typography>\r\n                        </CardContent>\r\n                        </Card>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                        <Webcam  style={{width:550,marginTop:20}}\r\n                        audio={false}\r\n                        ref={webCamRef}\r\n                        videoConstraints={videoConstraints}\r\n                        />\r\n                        <br/>\r\n                        {\r\n                    camActive?<Button variant='contained' color='primary' onClick={()=> {\r\n                        history.replace(quizPage);\r\n                    }} style={{background:'#03A9F4',color:'white',marginTop:10}}>Take Quiz</Button>\r\n                    :<Alert severity=\"error\"> Please Allow Camera Access</Alert>\r\n                }\r\n                        \r\n                        {/* Capture Button can be triggered in Attempt quiz Button\r\n                        <button onClick={capture}>Capture photo</button> */}\r\n                \r\n                </Grid>\r\n                <hr/>\r\n                <Grid item xs={12} style={{background:'#274056',paddingBottom:'25%'}}>\r\n                    <br/>\r\n\r\n                        <Typography display=\"inline\" variant=\"h5\" style={{fontWeight:600,marginLeft:200,color:'white'}}>\r\n                            Instructions :\r\n                        </Typography>\r\n                        <Typography style={{fontWeight:300,marginLeft:215,color:'white'}}>\r\n                            <ul>\r\n                            <li>Select an answer for every question. Unanswered questions will be scored as incorrect.</li>\r\n                            <li>Timing - You will need to complete each of your attempts in one sitting, as you are allotted {quizData.duration} minutes to complete each attempt.</li>\r\n                            <li>Answers - You may review your answer-choices and compare them to the correct answers after your final attempt.</li>\r\n                            <li>To start, click the \"Take the Quiz\" button. When finished, click the \"Submit Quiz\" button.</li>\r\n                            <li>Click on the Submit button at the bottom of the page to have your answers graded.</li>\r\n                            </ul>\r\n                        </Typography>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default TempLanding;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\MalpracticeGallary.js",["255"],"import { CircularProgress, Grid } from '@material-ui/core'\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst MalpracticeGallary = (props) => {\r\n    const quizID =  props.match.params.quizID;\r\n    const userID =  props.match.params.userID;\r\n    const [images, setImages] = useState([])\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [err,setErr] = useState(false);\r\n    const history = useHistory();\r\n    useEffect(()=>{\r\n        // Query Data base for Images\r\n        fetch(`/quiz/malpracticeLog/${userID}/${quizID}`).then(\r\n            data => {\r\n                data.json().then(resData =>{\r\n                    setLoading(false);\r\n                    if(data.msg){\r\n                        setErr(true);\r\n                    }else{\r\n                        setImages(resData);\r\n                        console.log(JSON.stringify(resData))\r\n                    }\r\n                })\r\n            }\r\n        ).catch(err => {\r\n            setLoading(false);\r\n            setErr(true);\r\n            console.error(err);\r\n        })\r\n    },[]);\r\n    if(isLoading)\r\n        return(\r\n            <div className=\"center\">\r\n                <CircularProgress />\r\n            </div>\r\n        );\r\n    else if(err)\r\n            return(\r\n                <Alert onClose={()=>{history.go(-1)}} severity=\"error\">\r\n                    <AlertTitle>Error</AlertTitle>\r\n                    Unauthorized Access or Server Error\r\n                </Alert>\r\n            );\r\n    else\r\n    return(\r\n        <Grid container>\r\n            {\r\n                images.length === 0? <Alert severity=\"info\" ><AlertTitle>Info</AlertTitle>No Images Present</Alert>:\r\n                images.map((img) => {\r\n                    const imgBuffer = Buffer.from(img.image.data);\r\n                    return(\r\n                        <Grid item xs={4}>\r\n                            <img src={imgBuffer} alt=\"mal\"/>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default MalpracticeGallary;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodingLandingPageTeacher.js",["256"],"import { AppBar, Grid } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport CustomBox from '../Helper/CustomBox';\r\nimport CodingSolutionDownload from \"./CodingSolutionDownload\";\r\n\r\nconst CodingLandingPageTeacher = (props) => {\r\n    const codeID = props.match.params.codeID;\r\n    const [codeData, setCodeData] = useState([]);\r\n    useEffect( () => {\r\n        fetch(`/code/getAll/${codeID}`)\r\n         .then(data =>  data.json().then(res => {setCodeData(res);\r\n         }))\r\n         .catch(err => console.log(err));\r\n     },[]);\r\n\r\n    const poeObj =  useSelector(state => state.currentCourse.poes);\r\n    console.log(poeObj);\r\n    return(\r\n        <>\r\n            <div className='ch-container'>\r\n            <div style={{padding:'5px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            {poeObj[0].title}\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n            </div>\r\n                <Grid style={{marginTop: '10vh'}} container>\r\n                    <Grid item xs={2}>\r\n                        <CodingSolutionDownload codeData={codeData} subject={\"POE RESULT\"} />\r\n                    </Grid>\r\n                    <Grid>\r\n                        <CustomBox innerText=\"Delete POE\" />\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CodingLandingPageTeacher;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodingLandingPageStudent.js",["257","258","259"],"import { AppBar, Button, Container, Grid, Typography } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nconst CodingLandingPageStudent = (props) => {\r\n    const codeID = props.match.params.codeID;\r\n    const userID = useSelector(state => state.auth.user.id);\r\n    const [codeAssignment,setCodeAssignment] = useState({});\r\n    const [startDate, setStartDate]= useState(\"\");\r\n    const [endDate, setEndDate]= useState(\"\");\r\n    const [isAvailable, setAvailable] = useState(false);\r\n    const [isProctored, setProctored] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    useEffect(()=>{\r\n        fetch(`/code/getCodingAssignment/${codeID}`).then(data => data.json().then(resData =>{\r\n            setCodeAssignment(resData);\r\n            dispatch({type: \"SET_CODING\", payload: resData});\r\n            const tempSD = new Date(resData.startDate);\r\n            const tempED = new Date(resData.endDate);\r\n            const totalTestcases = resData.problems[0].testcases.length;\r\n            setStartDate(tempSD);\r\n            setEndDate(tempED);\r\n\r\n            // Check StartDate and EndDate and then SetAvailable\r\n            if(tempSD.getTime() > Date.now() || tempED.getTime() > Date.now())\r\n            {   \r\n                // Check Submission Status\r\n                fetch(`/code/submitStatus/${codeID}/${userID}`).then(\r\n                    resData => resData.json().then(\r\n                        data => {\r\n                            if(data.msg){\r\n                                console.log(\"error Fetching Results\");\r\n                            }\r\n                            else{\r\n                                if(!data.found){\r\n\r\n                                    fetch(`/code/getUserCode/${codeID}/${userID}`).then(\r\n                                        resData => resData.json().then(data => {\r\n                                            if(data.msg){\r\n                                                dispatch({type: \"RESET_CODESOLUTION\"})\r\n                                                dispatch({type: \"SET_TOTALTESTCASE\", payload: totalTestcases})\r\n                                                setAvailable(true);\r\n                                            }else{\r\n                                                dispatch({type:\"LOAD_CODESOLUTION\", payload: data});\r\n                                                dispatch({type: \"SET_TOTALTESTCASE\", payload: totalTestcases})\r\n                                                setAvailable(true);\r\n                                            }\r\n                                        })\r\n                                    )\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n                    )\r\n                )\r\n                \r\n            }\r\n            \r\n        }\r\n        ))\r\n    },[])\r\n    return(\r\n        <Container className=\"grid-container\" maxWidth=\"xl\">\r\n            <AppBar position='static' className='Appbar'>\r\n                <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                    <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                        {codeAssignment.title}\r\n                    </Grid>\r\n                </Grid>\r\n            </AppBar>\r\n            <Grid  container spacing={3}  style={{marginTop: 10}} justify=\"center\" alignContent=\"center\" direction='column'>\r\n                <Grid item xs={6}>\r\n                    <strong>Start Date:</strong> {startDate.toString()}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <strong>End Date:</strong> {endDate.toString()}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <strong>Number of Questions:</strong> {codeAssignment.problems ?codeAssignment.problems.length:0}\r\n                </Grid>\r\n                <Grid item xs={12}> \r\n                    {isAvailable?<Button onClick={()=>{ history.replace(`/student/poe/${codeID}/${userID}`) }} variant=\"contained\" color=\"primary\">Take Test</Button>:<Typography>Not Available</Typography>}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default CodingLandingPageStudent;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizCreation\\QuizCreator.js",["260"],"import {useState, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TextField,Grid,Button,Checkbox,FormControlLabel, CircularProgress, Container, AppBar} from '@material-ui/core';\r\nimport {Alert, AlertTitle} from '@material-ui/lab'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst QuizCreator = (props) => {\r\n    const dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n    const state = useSelector(state => state.quizCreator);\r\n\tconst courseID = props.match.params.courseID;\r\n\tconst [isLoading, setLoading] = useState(false);\r\n    const [isBad,setBad] = useState(false);\r\n    const [isSuccess, setSuccess] = useState(false);\r\n    const [errMessage, setErrMessage] = useState(\"\");\r\n\tconsole.log(courseID);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\t\tsetBad(false);\r\n\t\tsetSuccess(false);\r\n\t\tsetLoading(true);\r\n\t\tsetErrMessage(\"\");\r\n\t\t// Do Simple form Check\r\n\r\n\t\tdispatch({type: \"SET_QUIZCOURSE\", payload: courseID})\r\n\r\n\t\tconsole.log(JSON.stringify(state));\r\n\r\n\t\tfetch(\"/quiz/addQuiz\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(state)\r\n\t\t}).then(data => data.json().then( (newData)=>\r\n\t\t\t{\r\n\t\t\t\tconsole.log(JSON.stringify(newData));\r\n\t\t\t\tif(newData.msg){\r\n\t\t\t\t\tsetBad(true);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\tsetErrMessage(newData.msg);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tsetSuccess(true);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\thistory.go(-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)).catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    const addQuestion = () => {\r\n        dispatch({type: \"ADD_QUESTION_TEMPLATE\"});\r\n    }\r\n    const addOption = (QIndex) => {\r\n        dispatch({type: \"ADD_OPTION_TEMPLATE\", payload:{QIndex}});\r\n    }\r\n    return(\r\n        <>\r\n            <div style={{padding:'12px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            Quiz Creation\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n            </div>\r\n            <Container maxWidth=\"xlg\">\r\n                <form  onSubmit={handleSubmit} noValidate autoComplete=\"off\" center=\"true\">\r\n                        <Grid container spacing={3} alignItems=\"center\" style={{padding:50 ,backgroundColor:\"beige\"}}>\r\n                            <Grid item xs={12}>\r\n                                <TextField required onChange = {(e)=> {dispatch({type:\"SET_QUIZ_SUBJECT\", payload: e.target.value})}} id=\"quizsub\" label=\"Quiz Subject\" variant=\"outlined\" fullWidth/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField required fullWidth\r\n                                    id=\"datetime-start\"\r\n                                    label=\"Start Date Time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue=\"2017-05-24T00:00\"\r\n                                    onChange = {(e)=> {dispatch({type:\"SET_STARTDATE\", payload: new Date(e.target.value)})}}\r\n                                    InputLabelProps={{\r\n                                    shrink: true,}}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField required fullWidth\r\n                                    id=\"datetime-end\"\r\n                                    label=\"End Date Time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue=\"2020-01-24T00:00\"\r\n                                    onChange = {(e)=> {dispatch({type:\"SET_ENDDATE\", payload: new Date(e.target.value)})}}\r\n                                    InputLabelProps={{\r\n                                    shrink: true,}}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField required onChange = {(e)=> {dispatch({type:\"SET_DURATION\", payload: e.target.value})}} type=\"number\" id=\"dur\" label=\"Duration\" variant=\"outlined\" fullWidth helperText=\"Quiz Duration in Minutes\"/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField required onChange = {(e)=> {dispatch({type:\"SET_THRESHOLD\", payload: e.target.value})}} type=\"number\" id=\"threshold\" label=\"Threshold\" variant=\"outlined\" fullWidth helperText=\"Threshold is Number of Warnings allowed for Students\"/>\r\n                            </Grid>\r\n                                {\r\n                                    state.questions.map((val, idx)=> {\r\n                                        let queId = `que-${idx+1}`\r\n                                        return (\r\n                                            <Grid item xs={10}>\r\n                                            <div key={idx}>\r\n                                            <Grid container spacing={3} alignItems=\"center\">\r\n                                                <Grid item xs={10}><TextField fullWidth required\r\n                                                label={\"Question#\"+idx}\r\n                                                type=\"text\"\r\n                                                name={queId}\r\n                                                data-id={idx}\r\n                                                id={queId}\r\n                                                value= {val.question}\r\n                                                onChange = {(e)=> dispatch({type: \"ADD_QUESTION\", payload: {QIndex: idx, question: e.target.value}})}\r\n                                                className=\"question-text\"\r\n                                                variant=\"outlined\"\r\n                                                />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                <Button label=\"+Add Option\" variant=\"outlined\" onClick={()=>addOption(idx)}>+ Add Option</Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            </div>\r\n                                            {\r\n                                    state.questions[idx].options.map((val, oIdx)=> {\r\n                                        \r\n                                        return (\r\n                                            <div key={oIdx}>\r\n                                                <Grid item xs={2}>\r\n                                                <FormControlLabel control={\r\n                                                <Checkbox checked={val.ans} onChange={()=> dispatch({type: \"SET_ANSWER\", payload: {QIndex: idx, OIndex: oIdx}})} color=\"primary\" inputProps={{ 'aria-label': 'secondary checkbox' }} />\r\n                                                \r\n                                                } label={\r\n                                                    <TextField required fullWidth label={`Option No.${oIdx+1}`} value={val.qs} onChange={(e)=> {dispatch({type:\"ADD_OPTION\", payload:{QIndex: idx, OIndex: oIdx, option: e.target.value}})}}/>\r\n                                                } />\r\n                                                    \r\n                                                </Grid>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                            </Grid>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                \r\n                                <Button variant=\"outlined\" onClick={addQuestion}>+ Add Question</Button>\r\n                            <Grid item xs={12}>\r\n                            {isLoading ?<CircularProgress />:<Button type=\"submit\" variant=\"contained\" color=\"primary\">Create Quiz</Button>}\r\n                            </Grid>\r\n                            <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\r\n                                    {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\r\n                            </Grid>\r\n                            <Grid container item justify=\"center\" alignItems=\"center\">\r\n                                    {isSuccess ?<Alert variant=\"filled\" severity=\"success\">Quiz Created!</Alert>:<></>}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n            </>\r\n    );\r\n}\r\n\r\nexport default QuizCreator;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\OE\\Room.js",["261","262"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 90%;\r\n    margin: auto;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst StyledVideo = styled.video`\r\n    height: 40%;\r\n    width: 50%;\r\n`;\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        props.peer.on(\"stream\", stream => {\r\n            ref.current.srcObject = stream;\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <StyledVideo playsInline autoPlay ref={ref} />\r\n    );\r\n}\r\n\r\n\r\nconst videoConstraints = {\r\n    height: window.innerHeight / 2,\r\n    width: window.innerWidth / 2\r\n};\r\n\r\nconst Room = (props) => {\r\n    const [peers, setPeers] = useState([]);\r\n    const socketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const roomID = props.match.params.roomID;\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"/\");\r\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            socketRef.current.emit(\"join room\", roomID);\r\n            socketRef.current.on(\"all users\", users => {\r\n                const peers = [];\r\n                users.forEach(userID => {\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push(peer);\r\n                })\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", payload => {\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                peersRef.current.push({\r\n                    peerID: payload.callerID,\r\n                    peer,\r\n                })\r\n\r\n                setPeers(users => [...users, peer]);\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n        })\r\n    }, []);\r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        return peer;\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n            {peers.map((peer, index) => {\r\n                return (\r\n                    <Video key={index} peer={peer} />\r\n                );\r\n            })}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Room;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\OE\\CreateRoom.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\TeacherQuizLanding.js",["263"],"import { AppBar, Grid } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport CustomBox from '../Helper/CustomBox';\r\nimport QuizDownload from './QuizDownload';\r\nconst TeacherQuizLanding = (props) => {\r\n    const quizId = props.match.params.quizID;\r\n    const [quizData, setQuizData] = useState([]);\r\n    const [subject, setSubject] = useState(null);\r\n    useEffect( () => {\r\n        fetch(`/quiz/getAll/${quizId}`)\r\n         .then(data =>  data.json().then(res => {setQuizData(res);\r\n         setSubject(res[0].quizName);\r\n         }))\r\n         .catch(err => console.log(err));\r\n     },[]);\r\n    const quizObj =  useSelector(state => state.currentCourse.quizes);\r\n    console.log(quizObj);\r\n    return(\r\n        <>\r\n            <div className='ch-container'>\r\n            <div style={{padding:'5px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            {quizObj[0].subject}\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n            </div>\r\n                <Grid style={{marginTop: '10vh'}} container>\r\n                    <Grid item xs={2}>\r\n                        <QuizDownload quizData={quizData} subject={subject} />\r\n                    </Grid>\r\n                    <Grid>\r\n                        <CustomBox innerText=\"Delete Quiz\" />\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TeacherQuizLanding;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateStudent\\CreateStudent.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\CreateCourse.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateTeacher\\CreateTeacher.js",["264","265"],"import {TextField, FormControl, Select, MenuItem, InputLabel, Grid, Button, Box, CircularProgress, Container, AppBar} from '@material-ui/core'\r\nimport {Alert, AlertTitle} from '@material-ui/lab'\r\nimport {useState} from 'react';\r\n\r\nconst CreateTeacher = () => {\r\n    const [firstName, setFName] = useState(\"\");\r\n    const [lastName, setLName] = useState(\"\");\r\n    const [middleName, setMName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [branch, setBranch] = useState(\"None\");\r\n    const [Class, setClass] = useState(\"None\");\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [isBad,setBad] = useState(false);\r\n    const [isSuccess, setSuccess] = useState(false);\r\n    const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n    const handleSubmit = (e) => {\r\n        setLoading(true);\r\n        setErrMessage(false);\r\n        setSuccess(false);\r\n        e.preventDefault();\r\n\r\n        const userName = lastName.toLowerCase() + \".\" + middleName.toLowerCase() + \".\" + firstName.toLowerCase();\r\n        const password = \"changeme\";\r\n        const userType = \"Teacher\";\r\n        const teacherData = {\r\n            firstName,middleName,lastName,branch\r\n        }\r\n        const studentData = {}\r\n        const reqBody = {\r\n            userName, email, password , userType, studentData , teacherData\r\n        }\r\n\r\n        console.log(JSON.stringify(reqBody));\r\n\r\n        fetch(\r\n            \"/user/register\",\r\n            {\r\n                method: \"POST\",\r\n                mode: 'cors',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(reqBody)\r\n            }\r\n        ).then(\r\n            response => response.json().then( data => {\r\n                console.log(JSON.stringify(data));\r\n                setLoading(false);\r\n                if(data.msg){\r\n                    setBad(true);\r\n                    setErrMessage(data.msg);\r\n                }else\r\n                    setSuccess(true);\r\n            })\r\n        ).catch((err) => {\r\n            console.error(err); \r\n            setLoading(false);\r\n            setBad(true);\r\n            setErrMessage(JSON.stringify(err));\r\n        }\r\n            );\r\n\r\n        \r\n        \r\n    }\r\n    return(\r\n        <Container maxWidth=\"xlg\">\r\n            <AppBar position='static' className='Appbar'>\r\n                <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                    <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                        Create Teacher\r\n                    </Grid>\r\n                </Grid>\r\n            </AppBar>\r\n            <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <Grid container style={ {flexGrow: 1, marginTop: 25, padding: 10} } spacing={2}>\r\n                        <Grid item xs={4} >\r\n                            <TextField value={firstName} onChange={(e)=> setFName(e.target.value)} fullWidth required label=\"First Name\" variant=\"outlined\"/>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <TextField value={middleName} onChange={(e)=>setMName(e.target.value)} fullWidth required label=\"Middle Name\" variant=\"outlined\"/>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <TextField value={lastName} onChange={(e)=> setLName(e.target.value) } fullWidth required label=\"Last Name\" variant=\"outlined\"/>\r\n                        </Grid>\r\n                    \r\n                        <Grid item xs={4}>\r\n                            <TextField value={email} onChange={(e)=>{setEmail(e.target.value)}} fullWidth required label=\"Email\" variant=\"outlined\"/>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <TextField value={phone} onChange={(e)=>{setPhone(e.target.value)}} type=\"number\" fullWidth required label=\"Phone Number\" variant=\"outlined\"/>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                            <FormControl required fullWidth variant=\"outlined\">\r\n                                <InputLabel id=\"branchDD\" >Branch</InputLabel>\r\n                                <Select value={branch} onChange={(e)=>{setBranch(e.target.value)}} labelId=\"branchDD\" label=\"Branch\">\r\n                                    <MenuItem value={\"biotech\"}>BioTech</MenuItem>\r\n                                    <MenuItem value={\"civil\"}>Civil</MenuItem>\r\n                                    <MenuItem value={\"cse\"}>CSE</MenuItem>\r\n                                    <MenuItem value={\"electronics\"}>Electronics</MenuItem>\r\n                                    <MenuItem value={\"mech\"}>Mechanical</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n\r\n                        <Grid container item justify=\"center\" alignItems=\"center\">\r\n                            <Box mt={5}>\r\n                            {isLoading ?<CircularProgress />:<Button type=\"submit\" variant=\"contained\" color=\"primary\">Create Teacher</Button>}\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\r\n                                {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\r\n                        </Grid>\r\n                        <Grid container item justify=\"center\" alignItems=\"center\">\r\n                                {isSuccess ?<Alert variant=\"filled\" severity=\"success\">Teacher Created!</Alert>:<></>}\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default CreateTeacher;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Login\\Login.js",["266","267","268","269","270"],"import {TextField,Grid,Button,Checkbox,FormControlLabel,Paper, CircularProgress} from '@material-ui/core';\r\nimport {useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Alert, AlertTitle} from '@material-ui/lab'\r\n\r\n\r\nconst style = {\r\n                maxWidth:'40%',\r\n                minWidth:'400px',\r\n                padding:'30px' ,\r\n                margin:'auto',\r\n                marginTop:\"5vh\",\r\n                // backgroundColor:'#4c5f7a',\r\n                backgroundColor:'white',\r\n                color:'black',\r\n                textAlign:'center',\r\n                borderRadius:'10pt',\r\n                fontWeight:'bold'\r\n            };\r\n\r\nconst Login = () =>  {\r\n    \r\n    const [userName, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [isBad,setBad] = useState(false);\r\n    const [errMessage, setErrMessage] = useState(\"\");\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch({ type:\"RESET_STORE\"});\r\n    },[])\r\n\r\n    function onSuccess(resData){\r\n        setLoading(false);\r\n        if(resData.msg){\r\n            setBad(true);\r\n            setErrMessage(resData.msg);\r\n        }\r\n        else{\r\n            dispatch({type: \"AUTHENTICATE\", payload: resData});\r\n            history.replace(\"/home\");\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        setBad(false);\r\n        setLoading(true);\r\n        e.preventDefault();\r\n        // alert(userName + \" \" + password);\r\n        if(userName === \"\" || password === \"\"){\r\n            setLoading(false);\r\n            setBad(true);\r\n            setErrMessage(\"Please Enter all the fields\");\r\n            return;\r\n        }\r\n        else{\r\n            fetch(\r\n                \"/user/login\",\r\n                {\r\n                    method: \"POST\",\r\n                    mode: 'cors',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            userName,\r\n                            password,\r\n                        }\r\n                    )\r\n                }\r\n            ).then(\r\n                response => response.json().then( data => onSuccess(data))\r\n            ).catch((err) => {console.error(err)});\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit} style={{height:'100vh',width:'100vw', background: 'linear-gradient(135deg, #364755 50%, #182835 50%)',position:'absolute',top:'0',left:'0'}}>\r\n            <img src=\"logo_trans.png\" style={{maxWidth:'100px'}} />\r\n            <div style={{display:'inline-block',position:'absolute',top:'30px',textAlign:'center',color:'#fec14e'}}>\r\n                <h1>Proctor</h1>\r\n            </div>\r\n            <div style={style}>\r\n                <Grid container spacing={8} alignItems=\"center\">\r\n                    <Grid item md={2} sm={true} xs={true}>\r\n                        <h1>Login</h1>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                    {/* <Grid item md={3}>Username</Grid> */}\r\n                    <Grid item md={12} sm={12} xs={12}>\r\n                        <TextField required onChange={(e)=> {setUserName(e.target.value)}} value={userName} id=\"usrn\" margin=\"normal\" variant=\"outlined\" label=\"Username\" type=\"text\" fullWidth required />\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={8} alignItems=\"flex-end\">\r\n                    {/* <Grid item md={3}>Password</Grid> */}\r\n                    <Grid item md={12} sm={12} xs={12}>\r\n                        <TextField required onChange={(e)=> {setPassword(e.target.value)}} value={password} id=\"pswd\" margin=\"normal\" variant=\"outlined\" label=\"Password\" type=\"password\" fullWidth required />\r\n     </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" justify=\"space-between\" style={{marginTop:'5vh'}}>\r\n                    <Grid item>\r\n                        <FormControlLabel control={\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                            />\r\n                        } label=\"Remember me\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button disableFocusRipple disableRipple style={{ textTransform: \"none\" }} variant=\"text\" color=\"primary\">Forgot password ?</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"center\" style={{ marginTop: '2%' }}>\r\n                    <Grid item md={4} fullWidth>\r\n                        {isLoading ?\r\n                        <CircularProgress />\r\n                        :<Button  type=\"submit\" variant=\"contained\" style={{ textTransform: \"none\", backgroundColor:\"#fec14e\",color:\"white\",minWidth:\"100px\",fontWeight:'bolder',fontSize:'medium',borderRadius:'5pt'}}>Login</Button>}\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"center\" style={{ marginTop: '2%' }}>\r\n                    <Grid item md={4} fullWidth>\r\n                        {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Login;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\AdminHome.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\admin\\CreateCourse\\AssignCourse.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherCourse.js",["271","272"],"import {AppBar, Box, Button, Grid, Toolbar} from '@material-ui/core'\r\nimport { useSelector } from 'react-redux';\r\nimport CustomBox from '../../Helper/CustomBox'\r\nimport {Alert} from '@material-ui/lab'\r\nimport { useHistory } from 'react-router';\r\n\r\nconst TeacherCourseHome = (props) => {\r\n    const courseID = props.match.params.courseName;\r\n    const courses =  useSelector(state => state.course);\r\n    const course = courses.filter((e)=> e._id === courseID)[0]\r\n    const quizes = course.quizes;\r\n    const poes = course.poes;\r\n    const oes = course.oes;\r\n    const history = useHistory();\r\n    console.log(course);\r\n    return(\r\n        <div className='ch-container'>\r\n            <div style={{padding:'5px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            {course.courseName}\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n            </div>\r\n            \r\n            <Grid className='cor' style={{margin:'0'}} container>\r\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\r\n                    <Box p={2} boxShadow={5} borderBottom={1}>\r\n                        Quizes\r\n                    </Box>\r\n                </Grid>\r\n                {(quizes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >No Active Quizes</Alert></Grid>:\r\n                quizes.map((quizObj)=> <CustomBox key={quizObj.quizID} innerText={quizObj.subject} onClick={()=> {history.push(`/teacher/quiz/${quizObj.quizID}`)}}/>)}\r\n                <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\r\n                    <Button onClick={()=>{ history.push(`/teacher/createQuiz/${courseID}`) }} variant=\"contained\" color=\"primary\">Create New Quiz</Button>\r\n                </Grid>\r\n                <Box border={1}/>\r\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\r\n                    <Box p={2} boxShadow={5} borderBottom={1}>\r\n                        Practicals\r\n                    </Box>\r\n                </Grid>\r\n                {(poes.length === 0)?<Grid  item xs={12} style={{width:'50%'}}><Alert severity=\"error\">No Active Practicals</Alert></Grid>:\r\n                poes.map((poeObj)=> <CustomBox key={poeObj.poeID} innerText={poeObj.title} onClick={()=> {history.push(`/teacher/poe/${poeObj.poeID}`)}}/>)}\r\n                <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\r\n                   <Button onClick={()=>{  history.push(`/teacher/createPOE/${courseID}`) }} variant=\"contained\" color=\"primary\">Create New Practical</Button>\r\n                 </Grid>\r\n                <Box border={1} />\r\n                \r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TeacherCourseHome;\r\n\r\n\r\n// import {AppBar, Box, Button, Grid, Toolbar} from '@material-ui/core'\r\n// import { useSelector } from 'react-redux';\r\n// import { useHistory } from 'react-router-dom'\r\n// // import CustomBox from '../../Helper/CustomBox'\r\n// import {Alert} from '@material-ui/lab'\r\n// import CustomBox from '../../Helper/CustomBox';\r\n// const TeacherCourseHome = (props) => {\r\n//     const courseID = props.match.params.courseName;\r\n//     const courses =  useSelector(state => state.course);\r\n//     const course = courses.filter((e)=> e._id === courseID)[0]\r\n//     const quizes = course.quizes;\r\n//     const poes = course.poes;\r\n//     const oes = course.oes;\r\n//     const history = useHistory();\r\n//     console.log(course);\r\n//     return(\r\n//         <div>\r\n//             <AppBar>\r\n//                 <Toolbar stype={{backgroundColor: \"black\" }}>\r\n//                 {course.courseName}\r\n//                 </Toolbar>\r\n//             </AppBar>\r\n//             <Grid style={{marginTop: 60}} container spacing={2}>\r\n//                 <Grid item xs={12} style={{textAlign: 'center'}}>\r\n//                     <Box p={2} boxShadow={3} bgcolor=\"background.paper\" borderBottom={1}>\r\n//                         Quizes\r\n//                     </Box>\r\n//                 </Grid>\r\n//                 {(quizes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >No Active Quizes</Alert></Grid>:\r\n//                 quizes.map((quizObj)=> <CustomBox key={quizObj.quizID} innerText={quizObj.subject} onClick={()=> {history.push(`/teacher/quiz/${quizObj.quizID}`)}}/>)}\r\n//                 <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\r\n//                     <Button onClick={()=>{ history.push(`/teacher/createQuiz/${courseID}`) }} variant=\"contained\" color=\"primary\">Create New Quiz</Button>\r\n//                 </Grid>\r\n//                 <Box border={1}/>\r\n//                 <Grid item xs={12} style={{textAlign: 'center'}}>\r\n//                     <Box p={2} boxShadow={3} bgcolor=\"background.paper\" borderBottom={1}>\r\n//                         Practicals\r\n//                     </Box>\r\n//                 </Grid>\r\n//                 {(poes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >No Active Practicals</Alert></Grid>:<></>}\r\n//                 <Grid container justify=\"center\" alignContent=\"center\" alignItems=\"center\" item xs={12}>\r\n//                     <Button onClick={()=>{ history.push('/teacher/createPOE') }} variant=\"contained\" color=\"primary\">Create New Practical</Button>\r\n//                 </Grid>\r\n//                 <Box border={1} />\r\n                \r\n//             </Grid>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default TeacherCourseHome;\r\n","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Profile\\TeacherProfile.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\practice\\practice.js",["273"],"import {useState, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TextField,Grid,Button,Checkbox,FormControlLabel, CircularProgress, AppBar, Container} from '@material-ui/core';\r\nimport {Alert, AlertTitle} from '@material-ui/lab'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst Practice = (props) => {\r\n    const dispatch = useDispatch();\r\n\tconst history = useHistory();\r\n    const state = useSelector(state => state.quizCreator);\r\n\tconst courseID = props.match.params.courseID;\r\n\tconst [isLoading, setLoading] = useState(false);\r\n    const [isBad,setBad] = useState(false);\r\n    const [isSuccess, setSuccess] = useState(false);\r\n    const [errMessage, setErrMessage] = useState(\"\");\r\n\tconsole.log(courseID);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\t\tsetBad(false);\r\n\t\tsetSuccess(false);\r\n\t\tsetLoading(true);\r\n\t\tsetErrMessage(\"\");\r\n\t\t// Do Simple form Check\r\n\r\n\t\tdispatch({type: \"SET_QUIZCOURSE\", payload: courseID})\r\n\r\n\t\tconsole.log(JSON.stringify(state));\r\n\r\n\t\tfetch(\"/quiz/addQuiz\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(state)\r\n\t\t}).then(data => data.json().then( (newData)=>\r\n\t\t\t{\r\n\t\t\t\tconsole.log(JSON.stringify(newData));\r\n\t\t\t\tif(newData.msg){\r\n\t\t\t\t\tsetBad(true);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\tsetErrMessage(newData.msg);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tsetSuccess(true);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\thistory.go(-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)).catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    const addQuestion = () => {\r\n        dispatch({type: \"ADD_QUESTION_TEMPLATE\"});\r\n    }\r\n    const addOption = (QIndex) => {\r\n        dispatch({type: \"ADD_OPTION_TEMPLATE\", payload:{QIndex}});\r\n    }\r\n    return(\r\n        <>\r\n            <div style={{padding:'12px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            Quiz Creation\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n            </div>\r\n            <Container maxWidth=\"xlg\">\r\n                <form  onSubmit={handleSubmit} noValidate autoComplete=\"off\" center=\"true\">\r\n                        <Grid container spacing={3} alignItems=\"center\" style={{padding:50 ,backgroundColor:\"beige\"}}>\r\n                            <Grid item xs={12}>\r\n                                <TextField onChange = {(e)=> {dispatch({type:\"SET_QUIZ_SUBJECT\", payload: e.target.value})}} id=\"quizsub\" label=\"Quiz Subject\" variant=\"outlined\" fullWidth/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField fullWidth\r\n                                    id=\"datetime-start\"\r\n                                    label=\"Start Date Time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue=\"2017-05-24T00:00\"\r\n                                    onChange = {(e)=> {dispatch({type:\"SET_STARTDATE\", payload: new Date(e.target.value)})}}\r\n                                    InputLabelProps={{\r\n                                    shrink: true,}}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField fullWidth\r\n                                    id=\"datetime-end\"\r\n                                    label=\"End Date Time\"\r\n                                    type=\"datetime-local\"\r\n                                    defaultValue=\"2020-01-24T00:00\"\r\n                                    onChange = {(e)=> {dispatch({type:\"SET_ENDDATE\", payload: new Date(e.target.value)})}}\r\n                                    InputLabelProps={{\r\n                                    shrink: true,}}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField onChange = {(e)=> {dispatch({type:\"SET_DURATION\", payload: e.target.value})}} type=\"number\" id=\"dur\" label=\"Duration\" variant=\"outlined\" fullWidth helperText=\"Quiz Duration in Minutes\"/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField onChange = {(e)=> {dispatch({type:\"SET_THRESHOLD\", payload: e.target.value})}} type=\"number\" id=\"threshold\" label=\"Threshold\" variant=\"outlined\" fullWidth helperText=\"Threshold is Number of Warnings allowed for Students\"/>\r\n                            </Grid>\r\n                                {\r\n                                    state.questions.map((val, idx)=> {\r\n                                        let queId = `que-${idx+1}`\r\n                                        return (\r\n                                            <Grid item xs={10}>\r\n                                            <div key={idx}>\r\n                                            <Grid container spacing={3} alignItems=\"center\">\r\n                                                <Grid item xs={10}><TextField fullWidth\r\n                                                label={\"Question#\"+idx}\r\n                                                type=\"text\"\r\n                                                name={queId}\r\n                                                data-id={idx}\r\n                                                id={queId}\r\n                                                value= {val.question}\r\n                                                onChange = {(e)=> dispatch({type: \"ADD_QUESTION\", payload: {QIndex: idx, question: e.target.value}})}\r\n                                                className=\"question-text\"\r\n                                                variant=\"outlined\"\r\n                                                />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                <Button label=\"+Add Option\" variant=\"outlined\" onClick={()=>addOption(idx)}>+ Add Option</Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            </div>\r\n                                            {\r\n                                    state.questions[idx].options.map((val, oIdx)=> {\r\n                                        \r\n                                        return (\r\n                                            <div key={oIdx}>\r\n                                                <Grid item xs={2}>\r\n                                                <FormControlLabel control={\r\n                                                <Checkbox checked={val.ans} onChange={()=> dispatch({type: \"SET_ANSWER\", payload: {QIndex: idx, OIndex: oIdx}})} color=\"primary\" inputProps={{ 'aria-label': 'secondary checkbox' }} />\r\n                                                \r\n                                                } label={\r\n                                                    <TextField fullWidth label={`Option No.${oIdx+1}`} value={val.qs} onChange={(e)=> {dispatch({type:\"ADD_OPTION\", payload:{QIndex: idx, OIndex: oIdx, option: e.target.value}})}}/>\r\n                                                } />\r\n                                                    \r\n                                                </Grid>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                            </Grid>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                \r\n                                <Button variant=\"outlined\" onClick={addQuestion}>+ Add Question</Button>\r\n                            <Grid item xs={12}>\r\n                            {isLoading ?<CircularProgress />:<Button type=\"submit\" variant=\"contained\" color=\"primary\">Create Quiz</Button>}\r\n                            </Grid>\r\n                            <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\r\n                                    {isBad ?<Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert>:<></>}\r\n                            </Grid>\r\n                            <Grid container item justify=\"center\" alignItems=\"center\">\r\n                                    {isSuccess ?<Alert variant=\"filled\" severity=\"success\">Quiz Created!</Alert>:<></>}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Container>\r\n            </>\r\n    );\r\n}\r\n\r\nexport default Practice;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Profile\\StudentProfile.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Student\\CourseHome.js",["274","275"],"import {AppBar, Box, Grid, Toolbar} from '@material-ui/core'\r\nimport { useSelector } from 'react-redux';\r\nimport CustomBox from '../../Helper/CustomBox'\r\nimport {Alert} from '@material-ui/lab'\r\nimport { useHistory } from 'react-router';\r\nconst CourseHome = (props) => {\r\n    const courseID = props.match.params.courseName;\r\n    const courses =  useSelector(state => state.course);\r\n    const course = courses.filter((e)=> e._id === courseID)[0]\r\n    const quizes = course.quizes;\r\n    const poes = course.poes;\r\n    const history = useHistory();\r\n    const oes = course.oes;\r\n    return(\r\n        <div className='ch-container'>\r\n            <div style={{padding:'5px'}}>\r\n                <AppBar position='static' className='Appbar'>\r\n                    <Grid container style={{justifyContent:'center',position:'relative'}}>\r\n                        <Grid item style={{fontSize:'30px',fontWeight:'bold',padding:'20px'}}>\r\n                            {course.courseName}\r\n                        </Grid>\r\n                    </Grid>\r\n                </AppBar>\r\n            </div>\r\n            <Grid className='cor' style={{margin:'0'}} container>\r\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\r\n                    <Box p={2} boxShadow={5} borderBottom={1}>\r\n                        Quizes\r\n                    </Box>\r\n                </Grid>\r\n                {(quizes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >Nothing Here</Alert></Grid>:\r\n                quizes.map((quizObj)=> <CustomBox key={quizObj.quizID} innerText={quizObj.subject} onClick={()=> {history.push(`quiz/${quizObj.quizID}`)}}/>)}\r\n                <Grid item xs={12} style={{textAlign: 'center',marginTop:'5vh'}}>\r\n                    <Box p={2} boxShadow={5} borderBottom={1}>\r\n                        Practicals\r\n                    </Box>\r\n                </Grid>\r\n                {(poes.length === 0)?<Grid  item xs={12}><Alert severity=\"error\" >Nothing Here</Alert></Grid>\r\n                :poes.map((poeObj)=> <CustomBox key={poeObj.poeID} innerText={poeObj.title} onClick={()=> {history.push(`/student/poe/${poeObj.poeID}`)}}/>)}\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CourseHome;\r\n\r\n\r\n","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CreateCodingQuestion.js",["276","277"],"import { useState, useEffect, React } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TextField, Grid, Button, Box, FormControl, CircularProgress,\r\n         Checkbox, FormControlLabel, FormLabel, FormGroup } from \"@material-ui/core\";\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\n\r\nconst CreateCodingQuetion = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const state = useSelector(state => state.CodingCreator);\r\n    const courseID = props.match.params.courseID;\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [isBad, setBad] = useState(false);\r\n    const [isSuccess, setSuccess] = useState(false);\r\n    const [errMessage, setErrMessage] = useState(\"\");\r\n    console.log(courseID);\r\n\r\n    useEffect(() => {\r\n        //dispatch({ type: \"RESET_CODING_CREATION\" })\r\n    }, []);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setBad(false);\r\n        setSuccess(false);\r\n        setLoading(true);\r\n        setErrMessage(\"\");\r\n        // Do Simple form Check\r\n\r\n        dispatch({ type: \"SET_CODING_COURSE\", payload: courseID })\r\n\r\n        console.log(JSON.stringify(state));\r\n\r\n        fetch(\"/code/addCodingAssignment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(state)\r\n        }).then(data => data.json().then((newData) => {\r\n            console.log(JSON.stringify(newData));\r\n            if (newData.msg) {\r\n                setBad(true);\r\n                setLoading(false);\r\n                setErrMessage(newData.msg);\r\n            }\r\n            else {\r\n                setSuccess(true);\r\n                setLoading(false);\r\n                history.go(-1);\r\n            }\r\n        }\r\n        )).catch(err => console.log(err))\r\n\r\n    }\r\n\r\n\r\n    const addProblem = () => {\r\n        dispatch({ type: \"ADD_PROBLEM_TEMPLATE\" });\r\n    }\r\n    const addTestcase = (PIndex) => {\r\n        dispatch({ type: \"ADD_TESTCASE_TEMPLATE\", payload: { PIndex } });\r\n    }\r\n\r\n\r\n    const handleLangChange = (event, idx) => {\r\n        dispatch({ type: \"SET_PROBLEM_LANGUAGES\", payload: { PIndex: idx, lang: [event.target.name], flag: event.target.checked} })\r\n        // setLanguages({ ...language, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} noValidate autoComplete=\"off\" center=\"true\" margin=\"20px\">\r\n            <Grid container spacing={3} alignItems=\"center\" style={{ padding: 50, backgroundColor: \"beige\" }} xs={12}>\r\n                <Grid item xs={12}>\r\n                    <TextField onChange={(e) => { dispatch({ type: \"SET_ASSIGNMENT_TITLE\", payload: e.target.value }) }} value={state.title} id=\"a_title\" label=\"Assignment Title\" variant=\"outlined\" fullWidth />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField fullWidth\r\n                        id=\"datetime-start\"\r\n                        label=\"Start Date Time\"\r\n                        type=\"datetime-local\"\r\n                        // defaultValue=\"2017-05-24T00:00\"\r\n                        onChange={(e) => { dispatch({ type: \"SET_STARTDATE\", payload: new Date(e.target.value) }) }}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }} />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField fullWidth\r\n                        id=\"datetime-end\"\r\n                        label=\"End Date Time\"\r\n                        type=\"datetime-local\"\r\n                        // defaultValue=\"2020-01-24T00:00\"\r\n                        onChange={(e) => { dispatch({ type: \"SET_ENDDATE\", payload: new Date(e.target.value) }) }}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }} />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField onChange={(e) => { dispatch({ type: \"SET_DURATION\", payload: e.target.value }) }} value={state.duration} type=\"number\" id=\"dur\" label=\"Duration in minutes\" variant=\"outlined\" fullWidth />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                <TextField onChange={(e) => { dispatch({ type: \"SET_CODETHRESHOLD\", payload: e.target.value }) }} value={state.threshold} type=\"number\" id=\"tre\" label=\"Warnings Threshold Value\" variant=\"outlined\" fullWidth />\r\n                    \r\n                </Grid>\r\n                {\r\n                    state.problems.map((val, idx) => {\r\n                        let probId = `prob-${idx + 1}`\r\n                        return (\r\n                            <Grid item xs={12}>\r\n\r\n                                <Box border={1} padding={3}>\r\n                                    <div key={idx}>\r\n                                        <Grid container spacing={3} alignItems=\"center\" border={1}>\r\n\r\n                                            <Grid item xs={12}>\r\n                                                <TextField onChange={(e) => { dispatch({ type: \"ADD_PROBLEM_TITLE\", payload: { PIndex: idx, title: e.target.value } }) }} value={val.title} id=\"probtitle\" label=\"Problem title\" variant=\"outlined\" fullWidth />\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <TextField multiline onChange={(e) => { dispatch({ type: \"ADD_STATEMENT\", payload: { PIndex: idx, statement: e.target.value } }) }} value={val.statement} id=\"probsub\" label=\"Problem Statement\" variant=\"outlined\" fullWidth />\r\n                                            </Grid>\r\n                                            {/* <Grid item xs={10}><TextField fullWidth\r\n                                            label={\"Languages\" + idx}\r\n                                            type=\"text\"\r\n                                            name={queId}\r\n                                            data-id={idx}\r\n                                            id={queId}\r\n                                            value={val.question}\r\n                                            onChange={(e) => dispatch({ type: \"ADD_QUESTION\", payload: { QIndex: idx, question: e.target.value } })}\r\n                                            className=\"question-text\"\r\n                                            variant=\"outlined\"\r\n                                        /> */}\r\n                                            <Grid item xs={12}>\r\n                                                <FormControl component=\"fieldset\">\r\n                                                    <FormLabel component=\"legend\">Pick Languages</FormLabel>\r\n                                                    <FormGroup row>\r\n                                                        <FormControlLabel\r\n                                                                control={\r\n                                                                <Checkbox\r\n                                                                    checked={state.problems[idx].languages.c}\r\n                                                                    onChange={ (event) => { dispatch({ type: \"SET_PROBLEM_LANGUAGES\", payload: { PIndex: idx, lang: event.target.name, flag: event.target.checked} }) } }\r\n                                                                    name=\"C\"\r\n                                                                />\r\n                                                                }\r\n                                                                label=\"C\"\r\n                                                        />\r\n                                                        <FormControlLabel\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={state.problems[idx].languages.cpp}\r\n                                                                    onChange={ (event) => { dispatch({ type: \"SET_PROBLEM_LANGUAGES\", payload: { PIndex: idx, lang: event.target.name, flag: event.target.checked} }) } }\r\n                                                                    name=\"Cpp\"\r\n                                                                />\r\n                                                            }\r\n                                                            label=\"Cpp\"\r\n                                                        />\r\n                                                        <FormControlLabel\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={state.problems[idx].languages.java}\r\n                                                                    onChange={ (event) => { dispatch({ type: \"SET_PROBLEM_LANGUAGES\", payload: { PIndex: idx, lang: event.target.name, flag: event.target.checked} }) } }\r\n                                                                    name=\"Java\"\r\n                                                                />\r\n                                                            }\r\n                                                            label=\"Java\"\r\n                                                        />\r\n                                                        <FormControlLabel\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={state.problems[idx].languages.python}\r\n                                                                    onChange={ (event) => { dispatch({ type: \"SET_PROBLEM_LANGUAGES\", payload: { PIndex: idx, lang: event.target.name, flag: event.target.checked} }) } }\r\n                                                                    name=\"Python3\"\r\n                                                                />\r\n                                                            }\r\n                                                            label=\"Python\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </FormControl>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        {\r\n                                            state.problems[idx].testcases.map((v, TIdx) => {\r\n\r\n                                                return (\r\n                                                    <Grid container spacing={3} alignItems=\"center\" border={1}>\r\n                                                        <Grid item xs={12} spacing={3} key={TIdx}>\r\n                                                            <TextField multiline fullWidth label={`Input: ${TIdx + 1}`} value={v.input} variant='outlined' onChange={(e) => { dispatch({ type: \"ADD_TESTCASE_INPUT\", payload: { PIndex: idx, TIndex: TIdx, input: e.target.value } }) }} /><br /><br />\r\n                                                            <TextField multiline fullWidth label={`Output: ${TIdx + 1}`} value={v.output} variant='outlined' onChange={(e) => { dispatch({ type: \"ADD_TESTCASE_OUTPUT\", payload: { PIndex: idx, TIndex: TIdx, output: e.target.value } }) }} />\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                    < br />\r\n                                    <Grid item xs={12}>\r\n                                        <Button label=\"+Add TestCase\" variant=\"outlined\" onClick={() => addTestcase(idx)}>+ Add Test Case</Button>\r\n                                    </Grid>\r\n                                </Box>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n\r\n\r\n                <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={addProblem}>+ Add Problem</Button>\r\n                    {isLoading ? <CircularProgress /> : <Button type=\"submit\" variant=\"contained\" color=\"primary\">Create Assignment</Button>}\r\n                </Grid>\r\n                <Grid container item xs={12} justify=\"center\" alignItems=\"center\">\r\n                    {isBad ? <Alert severity=\"error\"><AlertTitle>Error</AlertTitle>{errMessage}</Alert> : <></>}\r\n                </Grid>\r\n                <Grid container item justify=\"center\" alignItems=\"center\">\r\n                    {isSuccess ? <Alert variant=\"filled\" severity=\"success\">POE Created!</Alert> : <></>}\r\n                </Grid>\r\n            </Grid>\r\n        </form >\r\n    );\r\n}\r\n\r\nexport default CreateCodingQuetion;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\Capture.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\blankProfile.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Student\\StudentHome.js",["278","279"],"import { AppBar, Grid } from \"@material-ui/core\";\r\nimport React from 'react';\r\nimport CustomBox from '../../Helper/CustomBox';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nimport {useEffect,useState} from 'react';\r\nimport {useHistory} from 'react-router-dom'\r\nimport ProfileMenu from \"../../Login/ProfileMenu.js\";\r\n\r\nconst StudentHome = () => {\r\n    const studentData = useSelector(state => state.auth.studentDoc);\r\n    const branch = studentData.branch;\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const sem = studentData.sem;\r\n    const Class = studentData.Class;\r\n    const[courseList, setCourseList] = useState([])\r\n    useEffect(()=>{\r\n        fetch('/course/student/getAll',{\r\n           method: \"POST\",\r\n           mode: 'cors',\r\n           headers: { 'Content-Type': 'application/json' },\r\n           body: JSON.stringify({branch,Class,sem})\r\n        }).then(data => data.json().then(newData => {setCourseList(newData); dispatch({type: \"SET_COURSES\", payload: newData})})).catch(err => console.log(err))\r\n    },[]);\r\n\r\n    return(\r\n        <>\r\n            <div className='ch-container'>\r\n                <div style={{padding:'5px'}}>\r\n                    <AppBar position='static' className='Appbar'>\r\n                        <Grid container style={{justifyContent:'space-between',position:'relative'}}>\r\n                            <Grid item style={{display:'flex',justifyContent:'space-between'}}>\r\n                                <img src='logo_trans.png' className='logo'></img>\r\n                                <div style={{display:'inline-block',verticalAlign:'middle',textAlign:'center',color:'#fec14e'}}>\r\n                                    <h1 style={{position:'relative',top:'50%',transform: 'translateY(-50%)'}}>Proctor</h1>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item style={{justifyContent:'space-between',position:'relative'}}>\r\n                                <ProfileMenu />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AppBar>\r\n                </div>\r\n                <Grid style={{marginTop: '10vh'}} container>\r\n                    {\r\n                        courseList.map((val,idx) => {\r\n                            return(\r\n                                <Grid item xs={4} key={idx}>\r\n                                    <CustomBox innerText={val.courseName} onClick={()=>{\r\n                                        history.push(`/course/${val._id}`)\r\n                                    }}/>\r\n                                </Grid>\r\n                            );\r\n                        })\r\n                    }\r\n                    \r\n                </Grid>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudentHome;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Home\\Teacher\\TeacherHome.js",["280","281","282","283"],"import { AppBar, Toolbar, Card, Grid } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport CustomBox from '../../Helper/CustomBox';\r\nimport ProfileMenu from \"../../Login/ProfileMenu.js\";\r\n\r\n\r\nconst TeacherHome = () => {\r\n    const user = useSelector(state => state.auth.user)\r\n    const[courseList, setCourseList] = useState([])\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    useEffect(()=>{\r\n        const teacherID = user.teacherData;\r\n        console.log(JSON.stringify(user))\r\n        fetch('/teacher/getAllCourses',{\r\n           method: \"POST\",\r\n           mode: 'cors',\r\n           headers: { 'Content-Type': 'application/json' },\r\n           body: JSON.stringify({teacherID})\r\n        }).then(data => data.json().then(newData => {setCourseList(newData); dispatch({type: \"SET_COURSES\", payload: newData})})).catch(err => console.log(err))\r\n    },[]);\r\n\r\n    return(\r\n        <>\r\n            <div className='ch-container'>\r\n                <div style={{padding:'5px'}}>\r\n                    <AppBar position='static' className='Appbar'>\r\n                        <Grid container style={{justifyContent:'space-between',position:'relative'}}>\r\n                            <Grid item style={{display:'flex',justifyContent:'space-between'}}>\r\n                                <img src='logo_trans.png' className='logo'></img>\r\n                                <div style={{display:'inline-block',verticalAlign:'middle',textAlign:'center',color:'#fec14e'}}>\r\n                                    <h1 style={{position:'relative',top:'50%',transform: 'translateY(-50%)'}}>Proctor</h1>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item style={{justifyContent:'space-between',position:'relative'}}>\r\n                                <ProfileMenu />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AppBar>\r\n                </div>\r\n                <Grid style={{marginTop: '10vh'}} container>\r\n                    {\r\n                        courseList.map((val,idx) => {\r\n                            return(\r\n                                <Grid item xs={4} key={idx}>\r\n                                    <CustomBox innerText={val.courseName} onClick={()=>{\r\n                                        dispatch({type: \"SET_CURRENT_COURSE\", payload: val});\r\n                                        history.push(`/course/teacher/${val._id}`);\r\n                                    }}/>\r\n                                </Grid>\r\n                            );\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TeacherHome;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizDownload.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\Quiz.js",["284","285","286","287"],"import QuizHeader from './QuizHeader';\r\nimport {Grid, Card, CardActions, Button } from '@material-ui/core';\r\nimport QuestionsPanel from './rightPanel/RightPanel.js';\r\nimport QuestionBody, {  } from \"./questions/QuestionBody\";\r\nimport Countdown from 'react-countdown';\r\n// import questionBank from '../../service/questions.js';\r\nimport userData from '../../service/userData.js';\r\nimport {  useState, useEffect } from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { saveUserChoices, autoSubmitQuiz } from '../../reducer/quiz/quiz'\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction Quiz(props) {\r\n\tconst quizDataFromStore = useSelector(state => state.quiz);\r\n\tconst warnings = quizDataFromStore.warnings;\r\n\tconst userName = useSelector(state => state.auth)\r\n\tvar startDate = 0;\r\n\tconst history = useHistory();\r\n\tif(quizDataFromStore.startedAt === null)\r\n\t\tstartDate = Date.now()\r\n\telse\r\n\t\tstartDate = quizDataFromStore.startedAt;\r\n\tuseEffect(() => {\r\n\t\t\t   document.documentElement.requestFullscreen().catch((e) => {console.log(e)})\r\n\t\t\t   \r\n\t\t\t   //setStartDate( );\r\n\t}, []);\r\n\t\r\n\tconst dispatch = useDispatch();\r\n\t\r\n\tconst fromStore = quizDataFromStore.userChoices;\r\n\tconst userID = props.userID;\r\n\tconst quizID = props.quizID;\r\n\tconst questionBank = quizDataFromStore.questions;\r\n\t// const [quizData, setQuizData] = useState([])\r\n\tvar [attempted, updateAttempted] = useState(quizDataFromStore.attempted);\r\n\t// const [startDate,setStartDate] = useState(Date.now());\r\n\tconst [flagged, updateFlagged] = useState(quizDataFromStore.flagged);\r\n\tconst [currentQ, updateCurrentQ] = useState(1);\r\n\tvar endDate = startDate + parseInt(questionBank.duration)*60000;\r\n\t\r\n\tconst handleAttempted = () => {\r\n\t\tattempted = [...new Set(attempted)];\r\n\t\tupdateAttempted(\r\n\t\t\tarr => [...arr, currentQ]\r\n\t\t\t\r\n\t\t);\r\n\t\t\r\n\t}\r\n\tconst handleFlagged = () => {\r\n\t\tif(!flagged.includes(currentQ))\r\n\t\t\tupdateFlagged(\r\n\t\t\t\tarr => [...arr, currentQ]\r\n\t\t\t)\r\n\t\telse{\r\n\t\t\tvar temp = [...flagged]\r\n\t\t\ttemp.splice(temp.indexOf(currentQ));\r\n\t\t\tupdateFlagged(\r\n\t\t\t\ttemp\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tconst handlePrev = () => {\r\n\t\tupdateCurrentQ(currentQ-1);\r\n\t}\r\n\tconst handleNext = () => {\r\n\t\tupdateCurrentQ(currentQ+1);\r\n\t}\r\n\r\n\tconst handleUserChoice = (val) => {\r\n\r\n\t\tupdateUserChoice({...userChoices, [currentQ]: val})\r\n\r\n\t}\r\n\r\n\tvar [userChoices, updateUserChoice] = useState(quizDataFromStore.userChoices);\r\n\tfunction autoSubmit(){\r\n\t\tconst {firstName, lastName, middleName} = userName.studentDoc;\r\n\t\tconst quizName = quizDataFromStore.questions.subject;\r\n\t\tconst startedAt = startDate;\r\n\t\tconsole.log(\"Auto Submitting\");\r\n\t\tfetch('/quiz/submitQuiz',{\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tmode: 'cors',\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tbody: JSON.stringify({userID, qID: quizID, userChoices, questions: questionBank.questions, firstName, middleName, lastName, startedAt, quizName})\r\n\t\t }).then(data => data.json().then(newData => {\r\n\t\t\t if(newData.msg){\r\n\t\t\t\t alert(\"Error\");\r\n\t\t\t }else{\r\n\t\t\t\t//dispatch({type: \"QUIZ_RESET\"})\r\n\t\t\t\twindow.history.replace('/home');\r\n\t\t\t\t \r\n\t\t\t }\r\n\t\t })).catch(err => console.log(err))\r\n\t}\r\n\tuseEffect(()=> {\r\n\t\tconst data = {\r\n\t\t\tuserID: userID,\r\n\t\t\tquizID: quizID,\r\n\t\t\tattempted: attempted,\r\n    \t\tflagged: flagged,\r\n    \t\tuserChoices: userChoices,\r\n    \t\tstartedAt: startDate,\r\n\t\t\tquestions: questionBank,\r\n\t\t\twarnings\r\n\t\t}\r\n\t\t// Updates on Redux Store\r\n\t\tdispatch({type: \"SAVE_USERCHOICES\", payload: data});\r\n\t\t// Updates on Backend\r\n\t\tdispatch(saveUserChoices());\r\n\r\n\t}, [attempted, flagged, userChoices,dispatch]);\r\n\r\n\t\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\tconst {firstName, lastName, middleName} = userName.studentDoc;\r\n\t\tconst quizName = quizDataFromStore.questions.subject;\r\n\t\tconst startedAt = startDate;\r\n\t\te.preventDefault();\r\n\t\tif (window.confirm('Confirm Submission'))\r\n\t\t{\r\n\t\t\tfetch('/quiz/submitQuiz',{\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tmode: 'cors',\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\tbody: JSON.stringify({userID, qID: quizID, userChoices, questions: questionBank.questions, firstName, middleName, lastName, startedAt, quizName, warnings})\r\n\t\t\t }).then(data => data.json().then(newData => {\r\n\t\t\t\t\r\n\t\t\t\t if(newData.msg){\r\n\t\t\t\t\t alert(\"Error\");\r\n\t\t\t\t }else{\r\n\t\t\t\t\t//dispatch({type: \"QUIZ_RESET\"})\r\n\t\t\t\t\thistory.replace('/home');\r\n\t\t\t\t }\r\n\t\t\t })).catch(err => console.log(err))\r\n\r\n\t\t}else{\r\n\t\t\tdocument.documentElement.requestFullscreen().catch((e) => {console.log(e)})\r\n\t\t}\r\n\t}\r\n\r\n  return (\r\n    <div>\r\n      <Grid container justify={'center'} spacing={2}>\r\n        <Grid item xs={12} >\r\n        \t<QuizHeader />\r\n        </Grid>\r\n\t\t<Grid item container spacing={2} xs={12}>\r\n\t\t\t<Grid item xs={8}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t<QuestionBody onFlagged={handleFlagged} onAttempted={handleAttempted} currentQ={questionBank.questions[currentQ - 1]} no = {currentQ} flagged={flagged} userChoice={userChoices[currentQ.toString()]} updateUserChoice={handleUserChoice}/>\r\n\t\t\t\t<CardActions>\r\n\t\t\r\n\t\t\t{\r\n\t\t\t(currentQ !== 1) ?\r\n\t\t\t\t<Button variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handlePrev}>\r\n\t\t\t\tPrev\r\n\t\t\t</Button>:<></>\r\n\t\t  }\r\n\t\t  {currentQ < questionBank.questions.length?<Button  variant=\"contained\" size=\"small\" color=\"primary\" href=\"#\" onClick={handleNext}>\r\n          Next\r\n        </Button>:<></>}\r\n        \r\n      </CardActions>\r\n\t\t\t\t</Card>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={4}>\r\n\t\t\t\t<Grid item xs={12} container>\r\n\t\t\t\t\t<QuestionsPanel updateNav={(val)=> updateCurrentQ(val) } qNo={questionBank.questions.length} attemptedQ={attempted} flagged={flagged} current={currentQ}/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<Button onClick={handleSubmit} variant=\"contained\" style={{background:'green',color: 'white', marginTop: 10}}>\r\n          Submit\r\n        </Button>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={8}>\r\n\t\t\t\t<Countdown onComplete={()=>{dispatch(autoSubmitQuiz)}} date={endDate} />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n        </Grid>\r\n\t\t<Grid item xs={12} >\r\n        \t<h1> © Eye Procotor</h1>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Helper\\CustomBox.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Login\\ProfileMenu.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\service\\userData.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\RightPanel.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\QuizHeader.js",["288"],"import AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport {Grid } from '@material-ui/core';\r\nimport Capture from './Capture.js'\r\nimport { useState, useEffect } from 'react';\r\nimport * as faceapi from 'face-api.js';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; \r\nimport blankProfile from './blankProfile';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { autoSubmitQuiz } from '../../reducer/quiz/quiz'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  appBar: {\r\n  margin: 0,\r\n  },\r\n  userIcon:{\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n    marginLeft:'90%',\r\n    borderRadius: '3rem'\r\n  }\r\n  }));\r\n\r\nconst QuizHeader = (props) => {\r\n  const userData = useSelector(state => state.auth.user);\r\n  const quizSubject = useSelector(state => state.quiz.questions.subject);\r\n  const dispatch = useDispatch();\r\n  const quizID = useSelector(state => state.quiz.quizID);\r\n  useEffect(() => {\r\n    Promise.all([\r\n\t\t\tfaceapi.nets.tinyFaceDetector.loadFromUri('/models'),\r\n\t\t\tfaceapi.nets.faceLandmark68Net.loadFromUri('/models'),\r\n\t\t\tfaceapi.nets.faceRecognitionNet.loadFromUri('/models'),\r\n\t\t]).then(()=> {\r\n\t\t\tconsole.log(\r\n\t\t\t\"Face API Started\"\r\n\t\t  )}).catch((err) => console.log(\"Error Starting FACE API\", err.message));\r\n    \r\n    }, []);\r\n    function warn(message){\r\n      confirmAlert({\r\n        title: 'Warning',\r\n        message: message,\r\n        buttons: [\r\n          {\r\n            label: 'OK',\r\n            onClick: () => document.documentElement.requestFullscreen().catch((e) => {console.log(e); window.history.go(-1)})\r\n          }\r\n        ]\r\n      });\r\n    };\r\n    function saveLog(img){\r\n      const userID = userData.id;\r\n      const reqBody = {\r\n        image: img,\r\n        userID,\r\n        quizID\r\n      }\r\n\r\n      fetch('/quiz/malpracticeLog', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(reqBody)\r\n      }).then( data => {\r\n        console.log(\"Malpractice uploaded\");\r\n      }).catch(err => {\r\n        console.error(err);\r\n      })\r\n\r\n    }\r\n    const faceProcessingFunction = (faceData,img) => {\r\n      if(faceData.length === 0){\r\n        warn(\"No Face Detected\")\r\n        dispatch({type:\"INCREMENT_WARNING\"});\r\n        saveLog(img);\r\n        if(remaining < 1){\r\n          dispatch(autoSubmitQuiz());\r\n        }\r\n      }\r\n      else if(faceData.length > 1){\r\n        warn(\"Multiple Face Detected\");\r\n        dispatch({type:\"INCREMENT_WARNING\"});\r\n        saveLog(img);\r\n        if(remaining < 1){\r\n          dispatch(autoSubmitQuiz());\r\n        }\r\n      }\r\n    }\r\n    const status =  useSelector(state => state.quiz.warnings);\r\n    const remaining = useSelector(state => state.quiz.questions.threshold) - status;\r\n    //const profile = props.profile;\r\n    const classes = useStyles();\r\n    const [ImgSrc,setImgSrc]= useState(blankProfile);\r\n    const updateImgSrc = (img) => {\r\n      setImgSrc(img);\r\n      faceapi.detectAllFaces(\"input\", new faceapi.TinyFaceDetectorOptions()).then((data) => faceProcessingFunction(data,img)).catch((err)=> console.error(err))\r\n    }\r\n\r\n    return(\r\n        <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar style={{ background: '#274056' ,padding:5}}>\r\n         \r\n          <Grid container spacing={2}>\r\n            \r\n            <Grid item xs={4}>\r\n              <Typography variant=\"h5\" style={{fontWeight:500,margin:10}}>\r\n               {quizSubject}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={4} >\r\n              <img id=\"input\" src={ImgSrc} className={classes.userIcon}/>\r\n            </Grid>\r\n\r\n            <Grid item xs={3} style={{marginTop:'0.3%'}}>\r\n              <Typography display=\"inline\" style={{marginLeft:15}} varient=\"h6\">Username : </Typography>\r\n              <Typography display=\"inline\" style={{marginLeft:5}} varient=\"h6\">{userData.name}</Typography>\r\n              <br/>\r\n              <Typography display=\"inline\" style={{marginLeft:15}} varient=\"h6\">Warnings : </Typography>\r\n              {(remaining > 5)?\r\n              <Typography display=\"inline\" style={{marginLeft:5,color:'#22D400',fontWeight:600}} varient=\"h6\">{`${status} ( Remaining: ${remaining} )` }</Typography>:\r\n              <Typography display=\"inline\" style={{marginLeft:5,color:'#ff0000',fontWeight:600}} varient=\"h6\">{`${status} ( Remaining: ${remaining} )` }</Typography>}\r\n            </Grid>\r\n            <Grid xs={1}>\r\n              <Capture setImgSrc={updateImgSrc}/>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n}\r\n\r\n\r\nexport default QuizHeader;","G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\questions\\QuestionBody.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\rightPanel\\QuestionIcon.js",[],["289","290"],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\quiz\\questions\\Option.js",[],"G:\\Engineering\\Final Year\\GitFiles\\Source Code\\frontend\\src\\components\\Coding\\CodingSolutionDownload.js",[],{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","severity":1,"message":"296","line":74,"column":7,"nodeType":"297","messageId":"298","endLine":74,"endColumn":18},{"ruleId":"299","severity":1,"message":"300","line":67,"column":17,"nodeType":"297","messageId":"301","endLine":67,"endColumn":19},{"ruleId":"295","severity":1,"message":"302","line":11,"column":5,"nodeType":"297","messageId":"298","endLine":11,"endColumn":17},{"ruleId":"303","severity":1,"message":"304","line":8,"column":5,"nodeType":"305","messageId":"306","endLine":8,"endColumn":14},{"ruleId":"303","severity":1,"message":"307","line":9,"column":5,"nodeType":"305","messageId":"306","endLine":9,"endColumn":13},{"ruleId":"295","severity":1,"message":"308","line":23,"column":7,"nodeType":"297","messageId":"298","endLine":23,"endColumn":16},{"ruleId":"303","severity":1,"message":"309","line":27,"column":3,"nodeType":"305","messageId":"306","endLine":27,"endColumn":9},{"ruleId":"295","severity":1,"message":"310","line":52,"column":9,"nodeType":"297","messageId":"298","endLine":52,"endColumn":20},{"ruleId":"295","severity":1,"message":"311","line":52,"column":22,"nodeType":"297","messageId":"298","endLine":52,"endColumn":36},{"ruleId":"295","severity":1,"message":"312","line":67,"column":8,"nodeType":"297","messageId":"298","endLine":67,"endColumn":22},{"ruleId":"295","severity":1,"message":"313","line":68,"column":18,"nodeType":"297","messageId":"298","endLine":68,"endColumn":29},{"ruleId":"314","severity":1,"message":"315","line":104,"column":74,"nodeType":"316","messageId":"317","endLine":104,"endColumn":75},{"ruleId":"318","severity":1,"message":"319","line":140,"column":13,"nodeType":"320","messageId":"321","endLine":140,"endColumn":145},{"ruleId":"295","severity":1,"message":"322","line":187,"column":8,"nodeType":"297","messageId":"298","endLine":187,"endColumn":16},{"ruleId":"323","severity":1,"message":"324","line":374,"column":5,"nodeType":"325","endLine":374,"endColumn":66},{"ruleId":"326","severity":1,"message":"327","line":48,"column":12,"nodeType":"328","endLine":48,"endColumn":14,"suggestions":"329"},{"ruleId":"326","severity":1,"message":"330","line":24,"column":7,"nodeType":"328","endLine":24,"endColumn":9,"suggestions":"331"},{"ruleId":"326","severity":1,"message":"332","line":32,"column":7,"nodeType":"328","endLine":32,"endColumn":9,"suggestions":"333"},{"ruleId":"326","severity":1,"message":"334","line":15,"column":8,"nodeType":"328","endLine":15,"endColumn":10,"suggestions":"335"},{"ruleId":"295","severity":1,"message":"336","line":13,"column":12,"nodeType":"297","messageId":"298","endLine":13,"endColumn":23},{"ruleId":"295","severity":1,"message":"337","line":13,"column":25,"nodeType":"297","messageId":"298","endLine":13,"endColumn":37},{"ruleId":"326","severity":1,"message":"338","line":63,"column":7,"nodeType":"328","endLine":63,"endColumn":9,"suggestions":"339"},{"ruleId":"295","severity":1,"message":"340","line":1,"column":19,"nodeType":"297","messageId":"298","endLine":1,"endColumn":28},{"ruleId":"326","severity":1,"message":"341","line":27,"column":8,"nodeType":"328","endLine":27,"endColumn":10,"suggestions":"342"},{"ruleId":"326","severity":1,"message":"343","line":80,"column":8,"nodeType":"328","endLine":80,"endColumn":10,"suggestions":"344"},{"ruleId":"326","severity":1,"message":"345","line":16,"column":8,"nodeType":"328","endLine":16,"endColumn":10,"suggestions":"346"},{"ruleId":"295","severity":1,"message":"347","line":12,"column":12,"nodeType":"297","messageId":"298","endLine":12,"endColumn":17},{"ruleId":"295","severity":1,"message":"348","line":12,"column":19,"nodeType":"297","messageId":"298","endLine":12,"endColumn":27},{"ruleId":"295","severity":1,"message":"349","line":1,"column":57,"nodeType":"297","messageId":"298","endLine":1,"endColumn":62},{"ruleId":"326","severity":1,"message":"350","line":34,"column":7,"nodeType":"328","endLine":34,"endColumn":9,"suggestions":"351"},{"ruleId":"323","severity":1,"message":"324","line":81,"column":13,"nodeType":"325","endLine":81,"endColumn":68},{"ruleId":"352","severity":1,"message":"353","line":94,"column":193,"nodeType":"354","endLine":94,"endColumn":201},{"ruleId":"352","severity":1,"message":"353","line":101,"column":197,"nodeType":"354","endLine":101,"endColumn":205},{"ruleId":"295","severity":1,"message":"355","line":1,"column":36,"nodeType":"297","messageId":"298","endLine":1,"endColumn":43},{"ruleId":"295","severity":1,"message":"356","line":13,"column":11,"nodeType":"297","messageId":"298","endLine":13,"endColumn":14},{"ruleId":"295","severity":1,"message":"340","line":1,"column":19,"nodeType":"297","messageId":"298","endLine":1,"endColumn":28},{"ruleId":"295","severity":1,"message":"355","line":1,"column":28,"nodeType":"297","messageId":"298","endLine":1,"endColumn":35},{"ruleId":"295","severity":1,"message":"356","line":13,"column":11,"nodeType":"297","messageId":"298","endLine":13,"endColumn":14},{"ruleId":"295","severity":1,"message":"357","line":68,"column":11,"nodeType":"297","messageId":"298","endLine":68,"endColumn":27},{"ruleId":"295","severity":1,"message":"358","line":110,"column":29,"nodeType":"297","messageId":"298","endLine":110,"endColumn":35},{"ruleId":"326","severity":1,"message":"359","line":25,"column":7,"nodeType":"328","endLine":25,"endColumn":9,"suggestions":"360"},{"ruleId":"323","severity":1,"message":"324","line":34,"column":33,"nodeType":"325","endLine":34,"endColumn":76},{"ruleId":"295","severity":1,"message":"355","line":1,"column":18,"nodeType":"297","messageId":"298","endLine":1,"endColumn":25},{"ruleId":"295","severity":1,"message":"361","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":31},{"ruleId":"326","severity":1,"message":"362","line":23,"column":7,"nodeType":"328","endLine":23,"endColumn":9,"suggestions":"363"},{"ruleId":"323","severity":1,"message":"324","line":32,"column":33,"nodeType":"325","endLine":32,"endColumn":76},{"ruleId":"295","severity":1,"message":"364","line":7,"column":8,"nodeType":"297","messageId":"298","endLine":7,"endColumn":16},{"ruleId":"295","severity":1,"message":"365","line":31,"column":8,"nodeType":"297","messageId":"298","endLine":31,"endColumn":17},{"ruleId":"295","severity":1,"message":"366","line":77,"column":11,"nodeType":"297","messageId":"298","endLine":77,"endColumn":21},{"ruleId":"326","severity":1,"message":"367","line":113,"column":5,"nodeType":"328","endLine":113,"endColumn":47,"suggestions":"368"},{"ruleId":"323","severity":1,"message":"324","line":123,"column":15,"nodeType":"325","endLine":123,"endColumn":74},{"ruleId":"291","replacedBy":"369"},{"ruleId":"293","replacedBy":"370"},"no-native-reassign",["371"],"no-negated-in-lhs",["372"],"no-unused-vars","'CommingSoon' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'op' is already defined.","redeclared","'problemState' is assigned a value but never used.","no-dupe-keys","Duplicate key 'startedAt'.","ObjectExpression","unexpected","Duplicate key 'warnings'.","'testState' is assigned a value but never used.","Duplicate key 'border'.","'failedCases' is assigned a value but never used.","'setFailedCases' is assigned a value but never used.","'totalQuestions' is assigned a value but never used.","'setCurrentQ' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'gTC'.","ArrowFunctionExpression","unsafeRefs","'renderer' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'quizID', and 'userID'. Either include them or remove the dependency array.","ArrayExpression",["373"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["374"],"React Hook useEffect has missing dependencies: 'quizID' and 'userID'. Either include them or remove the dependency array.",["375"],"React Hook useEffect has a missing dependency: 'codeID'. Either include it or remove the dependency array.",["376"],"'isProctored' is assigned a value but never used.","'setProctored' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'codeID', 'dispatch', and 'userID'. Either include them or remove the dependency array.",["377"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.",["378"],"React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["379"],"React Hook useEffect has a missing dependency: 'quizId'. Either include it or remove the dependency array.",["380"],"'Class' is assigned a value but never used.","'setClass' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["381"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Toolbar' is defined but never used.","'oes' is assigned a value but never used.","'handleLangChange' is assigned a value but never used.","'probId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Class', 'branch', 'dispatch', and 'sem'. Either include them or remove the dependency array.",["382"],"'Card' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["383"],"'userData' is defined but never used.","'fromStore' is assigned a value but never used.","'autoSubmit' is defined but never used.","React Hook useEffect has missing dependencies: 'questionBank', 'quizID', 'startDate', 'userID', and 'warnings'. Either include them or remove the dependency array.",["384"],["371"],["372"],"no-global-assign","no-unsafe-negation",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},"Update the dependencies array to be: [dispatch, quizID, userID]",{"range":"409","text":"410"},"Update the dependencies array to be: [history]",{"range":"411","text":"412"},"Update the dependencies array to be: [quizID, userID]",{"range":"413","text":"414"},"Update the dependencies array to be: [codeID]",{"range":"415","text":"416"},"Update the dependencies array to be: [codeID, dispatch, userID]",{"range":"417","text":"418"},"Update the dependencies array to be: [props.peer]",{"range":"419","text":"420"},"Update the dependencies array to be: [roomID]",{"range":"421","text":"422"},"Update the dependencies array to be: [quizId]",{"range":"423","text":"424"},"Update the dependencies array to be: [dispatch]",{"range":"425","text":"426"},"Update the dependencies array to be: [Class, branch, dispatch, sem]",{"range":"427","text":"428"},"Update the dependencies array to be: [dispatch, user]",{"range":"429","text":"430"},"Update the dependencies array to be: [attempted, flagged, userChoices, dispatch, userID, quizID, startDate, questionBank, warnings]",{"range":"431","text":"432"},[1935,1937],"[dispatch, quizID, userID]",[1015,1017],"[history]",[1158,1160],"[quizID, userID]",[602,604],"[codeID]",[3020,3022],"[codeID, dispatch, userID]",[593,595],"[props.peer]",[2365,2367],"[roomID]",[664,666],"[quizId]",[1159,1161],"[dispatch]",[1064,1066],"[Class, branch, dispatch, sem]",[1010,1012],"[dispatch, user]",[3502,3544],"[attempted, flagged, userChoices, dispatch, userID, quizID, startDate, questionBank, warnings]"]